{"pageProps":{"posts":[{"slug":"html","frontmatter":{"title":"面试题集合（HTML篇）","date":"July 17, 2021","description":null},"excerpt":"","content":"\n## 1. 对HTML语义化的一些理解\n\n- 标签语义化有助于构架良好的HTML结构，有利于搜索引擎的建立索引、抓取。SEO\n- 有利于构建清晰的机构，有利于团队的开发、维护。\n\n## 2. 讲讲HTML5加了哪些东西\n\n- 语义化标签（header，footer等）\n- audio，video\n- Canvas\n- 本地存储，各种storage\n- Web Worker多线程\n\n## 3. 那些你不知道的meta标签\n\n- name 属性\n  \n  用于描述页面信息（内容，关键词，作者等）\n  - author\n  - description\n  - keywords\n  - viewport\n\n- http-equiv\n  \n  用于描述HTTP头部\n\n  - content-type\n  - content-security-policy（内容策略）"},{"slug":"js","frontmatter":{"title":"面试题集合（JS篇）","date":"July 17, 2021","description":null},"excerpt":"","content":"\n## 1. infinity代表什么数据\n\n  在JS中Infinity用于表示无穷大的数值，且不是常量，即无法明确表示它到底有多大。可以通过isFinite(val)判断当前数字是否是无穷大，函数返回true表示不是无穷大，返回false表示是无穷大。\n\n\n## 2. 如何计算动画的帧率（FPS）\n\n- 可以借助requestAnimationFrame API，requestAnimationFrame 使用一个回调函数作为参数。这个回调函数会在浏览器重绘之前调用。\n\n- requestAnimationFrame的回调函数执行次数通常与浏览器屏幕刷新次数相匹配，而利用这个API实现动画的原理就是回调函数内再次调用requestAnimationFrame，所以页面不断重绘时，然后检测1秒内requestAnimationFrame调用的次数，就是当前的FPS\n\n\n## 3. 请说说new String(\"A\")和String(\"A\")分别返回的结果，请解释为什么\n\n- new String(\"A\") :\n  \n  返回类型：引用类型，堆内存存储\n  返回值：字符串对象\n\n- String(\"A”) ：\n  \n  返回类型：基本类型，栈内存存储\n  返回值：字符串值\n\n## 4. 请通过reduce函数实现一维数组的求和\n\n``` javascript\nconst sum = arr => arr.reduce((a, b) => a + b)\n```\n\n## 5. 请说说严格模式下的this指向\n\n- 在严格模式下，在全局作用域中，this指向window对象\n- 在严格模式下，函数中的this等于undefined\n- 在严格模式下，对象的函数中的this指向调用函数的对象实例\n- 在严格模式下，构造函数中的this指向构造函数创建的对象实例。\n- 在严格模式下，在事件处理函数中，this指向触发事件的目标对象。\n\n## 6. 图片懒加载原理\n   \n  图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的\n\n- 拿到所有的图片 dom 。\n- 遍历每个图片判断当前图片是否到了可视区范围内。\n- 如果到了就设置图片的 src 属性。\n- 绑定 window 的 scroll 事件，对其进行事件监听（搭配节流）。\n\n``` js\nlet imgList = [...document.querySelectorAll('img')]\nlet length = imgList.length\n\n// 修正错误，需要加上自执行\n- const imgLazyLoad = function() {\n+ const imgLazyLoad = (function() {\n    let count = 0\n    \n   return function() {\n        let deleteIndexList = []\n        imgList.forEach((img, index) => {\n            let rect = img.getBoundingClientRect()\n            if (rect.top < window.innerHeight) {\n                img.src = img.dataset.src\n                deleteIndexList.push(index)\n                count++\n                if (count === length) {\n                    document.removeEventListener('scroll', imgLazyLoad)\n                }\n            }\n        })\n        imgList = imgList.filter((img, index) => !deleteIndexList.includes(index))\n   }\n- }\n+ })()\n\n// 这里最好加上节流处理\ndocument.addEventListener('scroll', imgLazyLoad)\n\n```\n\n## 7. 懒加载和预加载\n\n  两者都是提高页面性能有效的办法，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n\n## 8. 如何区分返回内容是文件流还是json数据\n\n``` javascript\nawait (await fetch(url)).blob();\n// Blob {size: 100, type: \"application/json\"}\n// Blob {size: 73226, type: \"image/jpeg\"}\n```\n\n## 9. 写一个方法判断js的方法是内置的还是自定义的\n\ntoString一下\n``` javascript\nfunction isNative (f) {\n    return typeof f === 'function' && /native code/.test(f.toString())\n}\n```\n\n## 10. 微任务与宏任务\n\n- JavaScript是单线程的语言\n- Event Loop是javascript的执行机制\n\n![interview-js-event-loop](interview-js-event-loop.jpeg)\n\n- 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入Event Table并注册函数\n- 当指定的事情完成时，Event Table会将这个函数移入Event Queue。\n- 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n- 上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n  js异步有一个机制，就是遇到宏任务，先执行宏任务，将宏任务放入eventqueue，然后在执行微任务，将微任务放入eventqueue最骚的是，这两个queue不是一个queue。当你往外拿的时候先从微任务里拿这个回掉函数，然后再从宏任务的queue上拿宏任务的回掉函数，也就是说‘同一层’既有微任务也有宏任务的时候，先执行微任务\n\n``` javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n\n## 11. 函数的方法 call()、apply()、bind()的区别\n\n### 改变函数执行上下文，也就是改变this的指向\n\n- call和apply改变了函数的this上下文后便执行该函数,而bind则是返回改变了上下文后的一个函数。\n- call和apply的第一个参数都是要改变上下文的对象，而call从第二个参数开始以参数列表的形式展现，apply则是把除了改变上下文对象的参数放在一个数组里面作为它的第二个参数。\n\n\n## 12. 前端性能优化\n- 减少 HTTP 请求\n- 使用 HTTP2\n- 使用服务端渲染\n  \n  客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。\n  服务端渲染：服务端返回 HTML 文件，客户端只需解析 HTML。\n\n- 静态资源使用 CDN\n- 将 CSS 放在文件头部，JavaScript 文件放在底部\n- 使用字体图标 iconfont 代替图片图标\n- 善用缓存，不重复加载相同的资源\n- 压缩文件（js，css，图片）\n- 图片优化（懒加载，base64）\n- 分chunk，大的库考虑用CDN（react，router等）\n- 使用事件委托\n- if-else 对比 switch\n  \n  当判断条件数量越来越多时，越倾向于使用 switch 而不是 if-else。\n- 使用 Web Workers\n- 降低 CSS 选择器的复杂性（勿嵌套多层）\n\n## 13. 什么是防抖和节流，应用场景是啥\n    \n### 都是用于限制函数被频繁调用\n\n**防抖：任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。**\n\n场景：有个输入框，输入之后会调用接口，获取联想词。但是，因为频繁调用接口不太好，所以我们在代码中使用防抖功能，只有在用户输入完毕的一段时间后，才会调用接口，出现联想词。\n\n**节流：任务频繁触发的情况下，指定时间间隔内只会执行一次任务。**\n\n场景：懒加载要监听计算滚动条的位置，使用节流按一定时间的频率获取；双十一抢商品\n\n## 14. 实现链式调用\n    \n链式调用的核心就在于调用完的方法将自身实例返回\n\n``` javascript\nfunction Class1() {\n    console.log('初始化')\n}\nClass1.prototype.method = function(param) {\n    console.log(param)\n    return this\n}\nlet cl = new Class1()\n//由于new 在实例化的时候this会指向创建的对象， 所以this.method这个方法会在原型链中找到。\ncl.method('第一次调用').method('第二次链式调用').method('第三次链式调用')\n```\n    \n## 15. 继承\n    \n**原型链继承**\n\n``` javascript\nfunction Animal() {\n    this.colors = ['black', 'white']\n}\nAnimal.prototype.getColor = function() {\n    return this.colors\n}\nfunction Dog() {}\nDog.prototype =  new Animal()\n\nlet dog1 = new Dog()\ndog1.colors.push('brown')\nlet dog2 = new Dog()\nconsole.log(dog2.colors)  // ['black', 'white', 'brown']\n```\n\n**问题**\n\n- 原型中的属性会被共享\n- 实例化时无法给父类构造函数传参\n  \n**借用构造函数实现继承**\n\n``` javascript\nfunction Animal(name) {\n    this.name = name\n    this.getName = function() {\n        return this.name\n    }\n}\nfunction Dog(name) {\n    Animal.call(this, name)\n}\n```\n借用构造函数实现继承解决了原型链继承的 2 个问题：引用类型共享问题以及传参问题。但是由于方法必须定义在构造函数中，所以**会导致每次创建子类实例都会创建一遍方法**。\n\n**组合继承**\n\n组合继承结合了原型链和盗用构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。\n\n``` javascript\nfunction Animal(name) {\n    this.name = name\n    this.colors = ['black', 'white']\n}\nAnimal.prototype.getName = function() {\n    return this.name\n}\nfunction Dog(name, age) {\n    Animal.call(this, name)\n    this.age = age\n}\nDog.prototype =  new Animal()\nDog.prototype.constructor = Dog\n\nlet dog1 = new Dog('奶昔', 2)\ndog1.colors.push('brown')\nlet dog2 = new Dog('哈赤', 1)\nconsole.log(dog2) // { name: \"哈赤\", colors: [\"black\", \"white\"], age: 1 }\n```\n\n## 16. js中的堆栈\n    \n### 栈数据结构\n\n- 栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。\n- 栈被称为是一种后入先出（LIFO，last-in-first-out）的数据结构。\n\n### 堆数据结构\n\n- 堆是一种经过排序的树形数据结构，每个结点都有一个值。\n- 堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。\n\n### 变量类型与内存的关系\n\n#### 基本数据类型\n\nSting、Number、Boolean、null、undefined、Symbol\n\n- 基本数据类型保存在栈内存中，因为基本数据类型占用空间小、大小固定，通过按值来访问，属于被频繁使用的数据。\n- 引用数据类型存储在堆内存中，因为引用数据类型占据空间大、大小不固定；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址\n\n\n## 17. Proxy的理解\n\n### 回答要点\n- Proxy的作用（拦截读取，写入等操作，可以覆盖原生操作）\n- Proxy和Object.defineProperty的区别（优势，Vue3用Proxy取代2版的defineProperty）\n- Reflect的用法（了解）\n\n### 链接\n[Proxy 和 Reflect](https://juejin.cn/post/6844904090116292616)\n\n## 18. Generator详解\n\n- 可控制的异步流程\n- async是Generator的实现（语法糖）\n\n## 19. 搞懂prototype和 __proto__\n\n### javascript继承的本质\n\n一个对象 A的__proto__属性指向的那个对象B，B就是 A 的原型对象（或者叫父对象），对象 A 可以使用对象 B 中的属性和方法，同时也可以使用对象 B 的 原型对象C 上的属性和方法，以此递归，就是所谓的原型链。\n\n### new 操作到底做了什么\n\n## 20. script标签中defer和async的区别\n\n都是异步加载 script 脚本\n- 如果脚本无需等待页面解析，且无依赖独立运行，那么应使用 async。\n- 如果脚本需要等待页面解析，且依赖于其它脚本，调用这些脚本时应使用 defer，将关联的脚本按所需顺序置于 HTML 中。\n\n## 21. CommonJs和Es Module的区别\n\n### CommonJs\n\n- CommonJs可以动态加载语句，代码发生在运行时\n- CommonJs导出值是拷贝，可以修改导出的值\n\n### Es Module\n\n- Es Module是静态的，不可以动态加载语句，只能声明在该文件的最顶部，代码发生在编译时\n- Es Module混合导出，单个导出，默认导出，完全互不影响\n- Es Module导出是引用值之前都存在映射关系，并且值都是可读的，不能修改\n\n### 题外话\n\nwebpack treeshaking 是基于静态检查，所以尽量使用 Es Module。\n\n\n\n\n"},{"slug":"css","frontmatter":{"title":"面试题集合（CSS篇）","date":"July 16, 2021","description":null},"excerpt":"","content":"\n## 1. css 伪类与伪元素区别\n   \n### 伪类(pseudo-classes)\n\n其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。⽐如:hover :active :visited :link :visited :first-child :focus :lang等；由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。\n  \n### 伪元素(Pseudo-elements)\n\nDOM树没有定义的虚拟元素\n\n核⼼就是需要创建通常不存在于⽂档中的元素，⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\n    \n### 伪类与伪元素的区别\n    \n表示⽅法\n\nCSS2 中伪类、伪元素都是以单冒号:表示,CSS2.1 后规定伪类⽤单冒号表示,伪元素⽤双冒号::表示，浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first�line, :first-letter 等)的单冒号写法。CSS2 之后所有新增的伪元素(如::selection)，应该采⽤双冒号的写法。CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头定义不同\n\n伪类即假的类，可以添加类来达到效果\n\n伪元素即假元素，需要通过添加元素才能达到效果\n    \n总结:\n\n伪类和伪元素都是⽤来表示⽂档树以外的\"元素\"。伪类和伪元素分别⽤单冒号:和双冒号::来表示。伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类。\n\n### 相同之处：\n\n伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\n  \n### 不同之处：\n    \n伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。\n\n## 2. position\n\n- static： 默认值。没有定位，元素出现在正常的流中（top, right, bottom, left 和 z-index 属性无效）\n- relative： 该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）\n- absolute： 元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的 **非 static** 定位祖先元素的偏移，来确定元素位置。\n- fixed： 元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。\n\n## 3. 水平垂直居中\n\n- 定宽居中\n  \n  - absolute+负maigin\n  ``` css\n  .father {\n      width: 400px;\n      height: 400px;\n      border: 1px solid blue;\n      position: relative;\n  }\n  \n  .son {\n      width: 100px;\n      height: 100px;\n      background-color: orange;\n      /* 1、定宽高定位：absolute + 负边距margin */\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      margin-top: -50px;\n      margin-left: -50px;\n  }\n  ```\n\n  - absolute+maigin:auto\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      position: relative;\n  }\n  \n  .son {\n      width: 100px;\n      height: 100px;\n      background: green;\n      /*2、定宽高定位：absolute + margin:auto */\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      margin: auto;\n  }\n  ```\n\n- 不定宽居中\n\n  - absolute+transform\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      position: relative;\n  }\n  \n  .son {\n      background: green;\n      /* 1、不定宽高居中：（依赖translate 2d的兼容性）absolute+transform */\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n  }\n  ```\n\n  - lineheight（行内元素）\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      /* 2、不定宽高居中  */\n      text-align: center;\n      line-height: 300px;\n      font-size: 0px;\n  }\n  \n  .son {\n      /* 2、不定宽高居中lineheight */\n      display: inline-block;\n      vertical-align: middle;\n      line-height: inherit;\n      text-align: left;\n      font-size: 16px;\n  }\n  ```\n\n  - flex布局\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      /* 4、不定宽高居中flex */\n      display: flex;\n      justify-content: center;\n      align-items: center;\n  }\n  ```\n\n  - grid布局\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      /* 5、grid */\n      display: grid;\n  }\n  \n  .son {\n      /* 5、不定宽高居中grid(兼容性不如flex 不推荐使用) */\n      justify-self: center;\n      align-self: center;\n  }\n  ```\n## 4. link和@import的区别？\n\n- link 属于 XHTML 标签，⽽ @import 是 CSS 提供的。\n- ⻚⾯被加载时，link 会同时被加载，⽽ @import 引⽤的 CSS 会等到⻚⾯被加载完再加载。\n- link ⽅式的样式权重⾼于 @import 的权重。\n  \n## 5. em\\px\\rem区别\n\n- em：在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width\n- rem：根元素的字体大小（html的font-size)\n- px：绝对单位，⻚⾯按精确像素展示\n\n\n\n"},{"slug":"questions","frontmatter":{"title":"面试题集合（真题篇）","date":"July 16, 2021","description":null},"excerpt":"","content":"\n## 1. 性能优化 ：项⽬⾥做过哪些性能优化，怎么检测性能，有没有实际测过优化的数据有多少提升\n  ![性能优化](performance.jpeg)\n\n### 性能优化\n\n- 避免过多的回流与重绘\n  \n  实质上是避免过多的 **render tree** 操作，避免使用table布局；DOM结构避免嵌套过深\n\n- JavaScript、Css、Html压缩\n- splitChunks 拆包\n- 网页中可视化部分（图片，视频等）采用骨架\n- 函数的频繁调用考虑使用防抖节流\n- 多利用缓存（多跟服务器端有关）\n- 大的基础库使用CDN\n- 用上懒加载和预加载\n- 使用Service Worker\n  \n### 检测性能\n\n- 很直观的看network页面的load时间\n- lighthouse进行检测\n- 用webpack-bundle-analyzer查看打包后资源情况\n  \n## 2. http2.0有哪些特性？https是怎么加密的，https强缓存在项目中怎么用的\n\n### http2.0的特性\n- 二进制分帧\n\n  HTTP 1.x 的解析是基于文本，HTTP 2之后将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，提高传输效率\n\n- 多路复用\n  \n  一次链接成功后，只要链接还没断开，那么 client 端就可以在一个链接中**并发**地发起多个请求，每个请求及该请求的响应不需要等待其他的请求，某个请求任务耗时严重，不会影响到其它连接的正常执行\n\n- 头部压缩\n  \n  由于 HTTP 是无状态的，每一个请求都需要头部信息标识这次请求相关信息，所以会造成传输很多重复的信息，当请求数量增大的时候，消耗的资源就会慢慢积累上去。所以 HTTP 2 可以维护一个头部信息字典，差量进行更新头信息，减少头部信息传输占用的资源\n\n### HTTP 与 HTTPS\n\n- HTTP 是明文传输，HTTPS 通过 SSL\\TLS 进行了加密\n- HTTP 的端口号是 80，HTTPS 是 443\n- HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费\n- HTTPS 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。\n\n### 浏览器缓存策略\n\n## 3. web安全（xss/csrf）\n\n### xss（Cross-Site Scripting）\n\n**定义**\n\n跨站脚本攻击，简称脚本注入\n\n**原理**\n\n恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\n**防范**\n\n- HttpOnly 防止劫取 Cookie，浏览器将禁止页面的Javascript 访问带有 HttpOnly 属性的Cookie。\n- 输入检查，对 **<**  、 **>** 进行转译，使得恶意的脚本内容无法执行（React DOM 会在渲染的时候把内容（字符串）进行转义）\n\n\n### csrf\n\n**定义**\n\n跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式\n\n**原理**\n\n利用同域下cookie可以共享，在A页面中嵌入B页面的请求，如果用户登录过B页面，即在A中的B请求可以获取B服务器信任。\n\n**防范**\n\n- Token验证\n\n## 4. 前端能在Http缓存上做哪些优化\n\n- 对于经常不改动的静态资源可以在 nginx 上增加相关的缓存配置，尽可能的命中强缓存\n- 正确使用好前端资源打包的 hash\n- Service Worke 也可以针对缓存做一些优化"},{"slug":"medium","frontmatter":{"title":"算法题（中等系列）","date":"July 14, 2021","description":null},"excerpt":"","content":"\n## 1. 打乱数组\n\n### 题目描述\n\n给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。\n\n实现 **Solution** class:\n- **Solution(int[] nums)** 使用整数数组 **nums** 初始化对象\n- **int[] reset()** 重设数组到它的初始状态并返回\n- **int[] shuffle()** 返回数组随机打乱后的结果\n\n### 示例\n\n``` javascript\n  输入\n  [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n  [[[1, 2, 3]], [], [], []]\n  输出\n  [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n  解释\n  Solution solution = new Solution([1, 2, 3]);\n  solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]\n  solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]\n  solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]\n```\n\n### 提示：\n\n![shuffle-an-array](shuffle-an-array.jpeg)\n\n### todo\n\n## 2. 无重复字符的最长子串\n\n### 题目描述\n\n给定一个字符串 **s** ，请你找出其中不含有重复字符的 最长子串 的长度。\n\n### 示例 1:\n\n``` javascript\n  输入: s = \"abcabcbb\"\n  输出: 3 \n  解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n### 示例 2:\n\n``` javascript\n  输入: s = \"bbbbb\"\n  输出: 1\n  解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n\n### 示例 3:\n\n``` javascript\n  输入: s = \"pwwkew\"\n  输出: 3\n  解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n       请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n\n### 示例 4:\n\n``` javascript\n  输入: s = \"\"\n  输出: 0\n```\n\n### 提示：\n\n![longest-substring-without-repeating-characters](longest-substring-without-repeating-characters.jpeg)\n\n\n\n"},{"slug":"easy","frontmatter":{"title":"算法题（简单系列）","date":"July 12, 2021","description":null},"excerpt":"","content":"\n## 1. 两数之和\n\n### 题目描述\n\n给定一个整数数组 **nums** 和一个目标值 **target**，请你在该数组中找出和为目标值的那 **两个** 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n### 示例\n\n``` javascript\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n````\n\n### 代码实现\n\n``` javascript\nconst findTotal = (nums, target) => {\n  for(let i = 0; i < nums.length; i++) {\n    if (nums.includes(target-nums[i])) {\n      return [i, nums.indexOf(target-nums[i])];\n    }\n  }\n}\n```\n\n\n## 2. 整数反转\n\n### 题目描述\n\n![reverse-integer](reverse-integer.jpeg)\n\n\n### 代码实现\n\n``` javascript\nconst reverse = (x) => {\n  let result = 0;\n  while (x !== 0) {\n    result = result * 10 + (x % 10);\n    x = Math.floor(x / 10);\n  }\n\n  if (result < -Math.pow(2, 31) || result > Math.pow(2, 31) - 1) {\n    return 0;\n  }\n  return result;\n};\n```\n\n## 3. 合并两个有序链表\n\n### 题目描述\n\n将两个升序链表合并为一个新的 **升序** 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n### 示例1\n\n![merge-two-sorted-lists](merge-two-sorted-lists.jpeg)\n\n``` javascript\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n```\n\n### 示例2\n\n``` javascript\n输入：l1 = [], l2 = []\n输出：[]\n```\n\n### 示例3\n\n``` javascript\n输入：l1 = [], l2 = [0]\n输出：[0]\n```\n\n### 提示\n\n- 两个链表的节点数目范围是 [0, 50]\n- -100 <= Node.val <= 100\n- l1 和 l2 均按 非递减顺序 排列\n\n``` javascript\n// 例如 现有两个链表\nconst ListNode1 = {\n  value: 0,\n  next: {\n    value: 2,\n    next: {\n      value: 4,\n      next: null\n    }\n  }\n}\n\nconst ListNode2 = {\n  value: 1,\n  next: {\n    value: 3,\n    next: {\n      value: 5,\n      next: null\n    }\n  }\n}\n```\n\n### 实现\n\n``` javascript\nconst mergeTwoLists = (l1, l2) => {\n  if (l1 === null) {\n    return l2\n  }\n  if (l2 === null) {\n    return l1\n  }\n  if (l1.value < l2.value) {\n    l1.next = mergeTwoLists(l1.next, l2)\n    return l1\n  }\n  if (l2.value < l1.value) {\n    l2.next = mergeTwoLists(l2.next, l1)\n    return l2\n  }\n}\n```\n\n## 4. 最大子序和\n\n### 题目描述\n\n给定一个整数数组 **nums** ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n### 示例1\n\n``` javascript\n输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n```\n\n### 示例2\n\n``` javascript\n输入：nums = [1]\n输出：1\n```\n\n### 示例3\n\n``` javascript\n输入：nums = [0]\n输出：0\n```\n\n### 示例4\n\n``` javascript\n输入：nums = [-1]\n输出：-1\n```\n\n### 示例5\n\n``` javascript\n输入：nums = [-100000]\n输出：-100000\n```\n\n### 提示\n- 1 <= nums.length <= 3 * 104\n- -105 <= nums[i] <= 105\n\n``` javascript\nconst maxSubArray = (nums) => {\n  let pre = 0;\n  let max = nums[0];\n  nums.forEach(x => {\n    pre = Math.max(pre + x, x);\n    max = Math.max(max, pre);\n  });\n  return max;\n};\n```\n\n## 5. 反转链表\n\n### 题目描述\n\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n### 示例:\n\n``` javascript\nconst ListNode = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: {\n          value: 5,\n          next: null\n        }\n      }\n    }\n  }\n}\n\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n### 限制：\n\n``` javascript\n0 <= 节点个数 <= 5000\n```\n\n``` javascript\nconst reverseList = (head) => {\n  let pre = null;\n  let cur = head;\n  while(cur) {\n    const next = cur.next;\n    cur.next = pre;\n    pre = cur;\n    cur = next;\n  }\n  return pre;\n}\n```\n\n## 6. 二叉树的最大深度\n\n### 题目描述\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n**说明： 叶子节点是指没有子节点的节点。**\n\n### 示例\n\n给定二叉树 **[3,9,20,null,null,15,7]**\n\n![maximum-depth-of-binary-tree](maximum-depth-of-binary-tree.jpeg)\n\n返回它的最大深度 3 。\n\n``` javascript\nconst maxDepth = tree => {\n  if (!tree) {\n    return 0;\n  }\n  const maxLeft = maxDepth(tree.left);\n  const maxRight = maxDepth(tree.right);\n  return Math.max(maxLeft, maxRight) + 1;\n}\n```\n\n## 7. 环形链表\n\n### 题目描述\n\n给定一个链表，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n如果链表中存在环，则返回 true 。 否则，返回 false 。\n\n### 思路\n\n给遍历过的节点打记号，如果遍历过程中遇到有记号的说明已环🤓\n\n``` javascript\nconst hasCycle = head => {\n  while(head) {\n    if (head.tag) {\n      return true;\n    }\n    head.tag = true;\n    head = head.next;\n  }\n  return false;\n}\n```\n\n\n## 8. 合并二叉树\n\n### 题目描述\n\n给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。\n\n你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。\n\n### 示例\n\n![merge-two-binary-trees](merge-two-binary-trees.jpeg)\n\n**注意：合并必须从两个树的根节点开始。**\n\n``` javascript\nconst mergeTrees = (t1, t2) => {\n  if (!t1 || !t2) {\n    return t1 || t2;\n  }\n  t1.value = t1.value + t2.value;\n  t1.left = mergeTrees(t1.left, t2.left);\n  t1.right = mergeTrees(t1.right, t2.right);\n  return t1;\n}\n```\n\n"},{"slug":"other","frontmatter":{"title":"面试题集合（其他）","date":"July 11, 2021","description":null},"excerpt":"","content":"\n## 1. 前端之SSO（单点登录）\n\n### 知识点\n- session存储用户信息于服务器\n- 通过session ID（cookie）来实现认证\n- 由于cookie不支持跨域，跨域时的解决方案不同于同域\n\n### 链接\n- [单点登录（SSO）看这一篇就够了](https://www.jianshu.com/p/75edcc05acfd)\n- [前端需要了解的 SSO 与 CAS 知识](https://juejin.cn/post/6844903509272297480)\n  \n## 2. git revert和reset\n\n- git reset操作会将版本回退至指定的commit，指定commit后的操作都将被撤销\n- git revert则撤销指定commit的修改，同时生成一个新的commit\n\n## 3. git merge和rebase\n\n![git merge](git-merge.jpeg)\n![git rebase](git-rebase.jpeg)\n\n- 都是合并操作\n- 当需要保留详细的合并信息的时候建议使用git merge，特别是需要将分支合并进入master分支时；\n- 当发现自己修改某个功能时，频繁进行了git commit提交时，发现其实过多的提交信息没有必要时，可以尝试git rebase\n- rebase操作会去除之前的commit记录，而merge不会\n\n### cherrypick的了解\n\n## 4. git 如何取消add操作\n\n可以reset，reset后面可以跟commit ID，也可以跟Head指针回退add内容\n\n## 5. git的工作流\n\ndev、release、master分支\n\n## 6. keepAlive组件的原理\n\n\n"},{"slug":"browser","frontmatter":{"title":"面试题集合（浏览器篇）","date":"July 6, 2021","description":null},"excerpt":"","content":"\n## 1. 浏览器存储\n\n### Cookie\n\n- 大小限制4k，超出会裁剪\n\n- HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息）\n  \n- cookie 存储在客户端\n  \n  cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。\n\n- cookie 是不可跨域的\n  \n### LocalStorage\n\n- 保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据\n- 大小为5M左右\n- 仅在客户端使用，不和服务端进行通信\n\n### sessionStorage\n\n- 会话级别的浏览器存储（窗口关闭会清空）\n- 大小为5M左右\n- 仅在客户端使用，不和服务端进行通信\n  \n基于上面的特点，sessionStorage 可以有效对表单信息进行维护，比如刷新时，表单信息不丢失。\n\n### sessionStorage 、localStorage 和 cookie 之间的区别\n\n- 共同点：都是保存在浏览器端，且都遵循同源策略。\n- 不同点：在于生命周期与作用域的不同"},{"slug":"write","frontmatter":{"title":"面试题集合（手撕代码篇）","date":"July 5, 2021","description":null},"excerpt":"","content":"\n  \n## 1. 手写 bind、call、apply\n\n``` javascript\n// call\nFunction.prototype.myCall = (content) => {\n  content = content || window;\n  content.fn = this;\n  const args = [...arguments].slice(1);\n  const result = content.fn(args);\n  delete content.fn;\n  return result;\n}\n\n// apply\nFunction.prototype.myApply = (content) => {\n  content = content || window;\n  content.fn = this;\n  let result\n  if (arguments[1] && Array.isArray(arguments[1])) {\n    if (arguments[1].length === 1) {\n      result = content.fn(...arguments[1])\n    } else {\n      result = content.fn()\n    }\n  }\n  delete content.fn\n  return result\n}\n\n// bind\nFunction.prototype.myBind = (content) => {\n  content = content || window;\n  content.fn = this;\n  const args = [...arguments].slice(1);\n  return () => {\n    content.fn(args)\n  }\n}\n```\n\n## 2. 手写防抖节流\n   \n   防抖\n   ``` javascript\n    const debounce = (fn, delay) => {\n      let timeout = null;\n      return () => {\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = setTimeout(() => {\n          fn.call(this, arguments)\n        }, delay)\n      }\n    }\n   ```\n   节流\n   ``` javascript\n    const throttle = (fn, delay) => {\n      let canRun = true;\n      if (!canRun) {\n        return\n      }\n      canRun = false;\n      setTimeout(() => {\n        fn.call(this. arguments);\n        canRun = true;\n      }, delay);\n    }\n   ```\n\n## 3. 手写数组flat\n\n``` javascript\nconst flat = arr => {\n  arr.reduce((pre, value) => {\n    return pre.concat(Array.isArray(value) ? flat(value) : value)\n  }, []);\n}\n```\n\n## 4. 写一个 mySetInterVal(fn, a, b),每次间隔 a,a+b,a+2b 的时间，然后写一个 myClear，停止上面的 mySetInterVal\n\n``` javascript\nfunction mySetInterVal(fn, a, b) {\n  this.a = a;\n  this.b = b;\n  this.time = 0;\n  this.handle = -1;\n  this.start = () => {\n    this.handle = setTimeout(() => {\n      fn();\n      this.time++;\n      this.start();\n    }, this.a + this.time * this.b);\n  }\n\n  this.stop = () => {\n    clearTimeout(this.handle);\n    this.time = 0;\n  }\n}\n\nvar a = new mySetInterVal(() => {console.log('123')},1000, 2000 );\na.start();\na.stop();\n```\n\n## 5. 斐波那契数列\n   \n``` javascript\nconst Fibonacci = (n) => {\n  if (n < 0) throw new Error('输入的数字不能小于0');\n  if (n < 2) return n;\n  return Fibonacci(n - 1) + Fibonacci(n - 2)\n}\n```\n   \n## 7. 实现 add(1)(2)(3)\n   \n``` javascript\nconst add = (a) => (b) => (c) => a + b + c;\n```\n\n## 8. 数据类型判断\n\ntypeof 可以正确识别：Undefined、Boolean、Number、String、Symbol、Function 等类型的数据，但是对于其他的都会认为是 object，比如 Null、Date 等，所以通过 typeof 来判断数据类型会不准确。但是可以使用 Object.prototype.toString 实现。\n\n``` javascript\nconst getType = (obj) => {\n  return Object.prototype.toString.call(obj).slice(8, -1);\n}\n```\n\n## 9. 数组扁平化\n    \n数组扁平化就是将 [1, [2, [3]]] 这种多层的数组拍平成一层 [1, 2, 3]。使用 Array.prototype.flat 可以直接将多层数组拍平成一层：\n\n``` javascript\n[1, [2, [3]]].flat(2)  // [1, 2, 3]\n```\n\n关键：递归\n\n``` javascript\nconst flatten = arr => {\n  let newArr = [];\n  for(let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      newArr.concat(flatten(arr[i]))\n      return\n    }\n    newArr.push(arr[i])\n  }\n  return neaArr;\n}\n```\n\n## 10. 深浅拷贝\n\n浅拷贝：只考虑对象类型\n\nES5版\n``` javascript\nfunction shallowCopy(obj) {\n  if (typeof obj !== 'object') return\n\n  let newObj = obj instanceof Array ? [] : {};\n\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      newObj[i] = obj[i];\n    }\n  }\n\n  return newObj;\n}\n```\n\nES6版\n``` javascript\nconst shallowCopy = obj => Array.isArray(obj) ? [...obj] : {...obj}\n```\n\n深拷贝\n\n``` javascript\nconst deepClone = obj => {\n  if (typeof obj !== 'object') return;\n  let newObj = obj instanceof Array ? [] : {};\n  \n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (typeof obj[key] === 'object') {\n        newObj[key] = deepClone(obj[key]);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  return newObj;\n}\n```\n\n## 11. 解析 URL 参数为对象\n  \n``` javascript\nconst urlSearch = href => {\n  let obj = {};\n  const queryIndex = href.indexOf('?');\n  const urlOptions = href.slice(queryIndex + 1, href.length);\n  const options = urlOptions.split('&');\n  options.map(option => {\n    const equalIndex = option.indexOf('=');\n    obj[option.slice(0, equalIndex)] = option.slice(equalIndex + 1, option.length);\n  });\n  return obj;\n}\n```\n\n## 12. 实现柯里化（Currying）\n\n``` javascript\nfunction curry(fn) {\n    let judge = (...args) => {\n        if (args.length == fn.length) return fn(...args)\n        return (...arg) => judge(...args, ...arg)\n    }\n    return judge\n}\n```\n\n## 13. 手写AJAX\n\n``` js\nconst myAjax = (url) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) return\n      if (xhr.status === 200) {\n        resolve(xhr.responseText)\n      } else {\n        reject(xhr.responseText)\n      }\n    }\n    xhr.send();\n  })\n}\n```\n\n## 14. 手写Promise\n\n``` javascript\nconst PADDING = \"PADDING\";\nconst FULFILLED = \"FULFILLED\";\nconst REJECTED = \"REJECTED\";\n\nclass MyPromise {\n  constructor(executor) {\n    this.status = PADDING;\n    this.value = undefined;\n    this.error = undefined;\n\n    let resolve = (value) => {\n      if (this.status === PADDING) {\n        this.value = value;\n        this.status = FULFILLED;\n      }\n    }\n\n    let reject = (error) => {\n      if (this.status === PADDING) {\n        this.error = error;\n        this.status = REJECTED;\n      }\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.error)\n    }\n  }\n}\n```\n    \n## 15. 实现 Promise.all\n  \n``` js\nconst promiseAll = (promises) => {\n  if (Array.isArray(promises)) {\n    throw new Error('the arguments must be an array !!!')\n  }\n  const promisesLength = promises.length;\n  let current = 0, result = [];\n  new Promise((resolve, reject) => {\n    promises.forEach((promise, i) => {\n      Promise.resolve(promise).then(value => {\n        current ++;\n        result[i] = value;\n        if (current === promisesLength) {\n          resolve(result)\n        }\n      }, error => reject(error))\n    })\n  })\n}\n```\n\n## 16. 手写模版字符串\n\n``` javascript\nconst render = (str, data) => {\n  const reg = /\\{\\{(\\w+)\\}\\}/;\n  if (reg.test(str)) {\n    const key = reg.exec(str)[1];\n    str = str.replace(reg, data[key]);\n    return render(str, data);\n  }\n  return str;\n} \n```"},{"slug":"framework","frontmatter":{"title":"面试题集合（框架篇）","date":"July 1, 2021","description":null},"excerpt":"","content":"\n## 1. 什么时候使用状态管理器（React）\n\n   - state并不总是以单向的方式线性流动\n   - 存在组件需要更新全局状态\n   - 存在组件需要更新另一个组件的状态\n   - 某个状态需要在全局使用或共享（例如角色权限等信息）\n\n## 2. redux-saga和redux-thunk有什么本质的区别\n\n**redux-thunk** 中 **dispatch** 可以接受一个函数作为参数，而 **redux-saga** 其实和原始的 **redux** 保持一致，**dispatch** 的只是一个对象(plain object),异步是通过saga文件中的 **generator** 函数来处理的\n\n## 3. React 项目中有哪些细节可以优化？实际开发中都做过哪些性能优化\n   \n  - 优化资源加载（减少http请求，采用CDN静态资源，小图片base64）\n  - 首屏考虑SSR\n  - 图片使用懒加载\n  - 相关资源的预加载\n  - 关于可视化的显示可以加入骨架\n  - 分chunk实现动态加载组件\n  - Service worker做缓存\n  - 开发中遍历要给组件加key\n  - css勿嵌套多层\n  - 不必要的dom标签用Fragments\n  - 考虑redux的必要性\n  \n## 4. react 最新版本解决了什么问题 加了哪些东西\n## 5. React 事件绑定原理\n   \nReact并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。\n\n另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 event.preventDefault。\n\n## 6. webpack 做过哪些优化，开发效率方面、打包策略方面等等\n   \n   [查看答案](https://github.com/lgwebdream/FE-Interview/issues/25)\n\n## 7. 说一下 react-fiber\n   [查看答案](https://github.com/lgwebdream/FE-Interview/issues/33)\n\n## 8. React 18的新特性\n\n  - 新的 **ReactDOM.createRoot()** API（替换 **ReactDOM.render()**）\n  - 新的 **startTransition** API（用于非紧急状态更新）\n  - 渲染的自动批处理优化（主要解决异步回调中无法批处理的问题）\n  - 支持 **React.lazy** 的 全新 SSR 架构（支持 **<Suspense>** 组件）\n\n## 9. React 开发Tips\n\n官方文档即是最佳实践\n\n1. 尽量使用 react 高版本进行开发\n     - fiber 组件更新的优势\n     - 各种官方 hook 的使用（useMemo，useCallback）\n     - 等等\n\n2. 数组遍历渲染时，key的正确使用\n3. Fragment 的使用\n4. Suspense 和 lazy 的搭配使用（懒加载）\n5. 代码的提取（HOC，手写hook）\n6. 合理使用状态管理（Redux，Context）\n\n## 10. React的合成事件\n\n由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。\n为此，React提供了一种“顶层注册，事件收集，统一触发”的事件机制。\n\n委托到顶层root根节点上\n\n## 11. setState 是异步还是同步\n\n- setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。\n- setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\n- setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。\n"},{"slug":"http","frontmatter":{"title":"面试题集合（网络篇）","date":"July 1, 2021","description":null},"excerpt":"","content":"\n## 1. TCP/IP 四层网络模型\n\n第一层：应用层，主要有负责web浏览器的 **HTTP** 协议， 文件传输的 **FTP** 协议，负责电子邮件的 **SMTP** 协议，负责域名系统的 **DNS** 等。\n第二层：传输层，主要是有可靠传输的 **TCP** 协议，特别高效的 **UDP** 协议。主要负责传输应用层的数据包。\n第三层：网络层，主要是 **IP** 协议。主要负责寻址（找到目标设备的位置）\n第四层：数据链路层，主要是负责转换数字信号和物理二进制信号。\n\n## 2. 用户输入url到页面展示的过程\n   \n- DNS解析\n  \n  域名到真实IP的寻址过程\n- 发起TCP连接\n  \n  三次握手🤝，确定 **client** ，**server** 双端的接受发送能力\n- 发起Http请求\n- 服务器处理请求并返回HTTP报文\n- 浏览器解析渲染页面\n\n## 3. 说一下 Http 缓存策略，有什么区别，分别解决了什么问题\n   \n   浏览器每次发起请求时，先在本地缓存中查找结果以及缓存标识，根据缓存标识来判断是否使用本地缓存。如果缓存有效，则使用本地缓存；否则，则向服务器发起请求并携带缓存标识。根据是否需向服务器发起HTTP请求，将缓存过程划分为两个部分：强制缓存和协商缓存，强缓优先于协商缓存。\n\n  - 强缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。\n  - 协商缓存，让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，将缓存信息中的Etag和Last-Modified通过请求 发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。\n\n  HTTP缓存都是从第二次请求开始的：\n\n  - 第一次请求资源时，服务器返回资源，并在response header中回传资源的缓存策略；\n  - 第二次请求时，浏览器判断这些请求参数，击中强缓存就直接200，否则就把请求参数加到request header头中传给服务器，看是否击中协商缓存，击中则返回304，否则服务器会返回新的资源。这是缓存运作的一个整体流程图：\n  ![chrome-cache](chrome-cache.jpeg)\n\n## 4. 常见的Http状态码\n\n- 200 OK：表示从客户端发送给服务器的请求被正常处理并返回\n- 204 No Content：表示客户端发送给服务端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）\n- 301 Moved Permanently：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL\n- 302 Found：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL\n- 304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码\n- 400 Bad Request：表示请求报文中存在语法错误（一般指参数）\n- 401 Unauthorized：没有经过身份认证，需要通过HTTP认证\n- 403 Forbidden：身份认证过了，但是没有权限\n- 404 Not Found：(客户端问题)请求的资源没有找到，说明客户端错误的请求了不存在的资源\n- 500 Inter Server Error：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时\n- 503 Server Unavailable：服务不可用，一般指维护中或者服务重启中\n\n## 5. 跨域的复杂请求和简单请求的区别\n\n### 简单请求\n\n- HTTP方法是下列之一（HEAD、GET、POST）\n- HTTP头信息不超出以下几种字段\n  \n  **Accept**\n\n  **Accept-Language**\n\n  **Content-Type** （application/x-www-form-urlencoded、multipart/form-data、text/plain）\n\n任何一个 **不满足上述要求** 的请求，即被认为是复杂请求\n\n### 复杂请求\n\n- 一个复杂请求不仅有：包含通信内容的请求，同时也包含预请求。\n\n- 复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种\"预请求\"，此时作为服务端，也需要返回\"预回应\"作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。\n\n## 5. TCP和UDP\n\n- TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。\n- 虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为\n- 对数据准确性要求高，速度可以相对较慢的，可以选用TCP\n- HTTP3.0取两者之长\n"},{"slug":"data-structure","frontmatter":{"title":"数据结构笔记","date":"June 30, 2021","description":null},"excerpt":"","content":"\n## 存储方式\n\n### 数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）\n\n散列表、栈、队列、堆、树、图等等各种数据结构都属于上层建筑，而数组和链表才是「结构基础」。\n\n### 两者优缺点\n\n**数组**\n\n1. 由于是连续存储，可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间，访问数组元素的时间复杂度 O(1)；\n2. 但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。\n\n**链表**\n\n1. 因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；\n2. 如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。\n3. 但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。\n\n\n## 基本操作\n\n数据结构的基本操作无非遍历 + 访问，即增删改查；\n\n但是不同数据结构的增删改查的效率是不一样的，所以我们需要了解各数据结构的特性以便我们在不同场景下提高代码的性能。\n\n遍历 + 访问 分为两种形式：线性的和非线性的。\n\n线性：以for/while 迭代为代表\n\n非线性：以递归为代表\n\n\n"},{"slug":"method","frontmatter":{"title":"js常用方法集合（一）","date":"June 30, 2021","description":null},"excerpt":"","content":"\n## Array\n\n1. 将输入值转化为数组\n\n``` javascript\nconst castArray = value => Array.isArray(value) ? value : [value];\n\n// Examples\ncastArray(1);               // [1]\ncastArray([1, 2, 3]);       // [1, 2, 3]\n```\n\n2. 判断数组是否为空\n\n``` javascript\nconst isEmpty = arr => Array.isArray(arr) && arr.length === 0;\n\n// Examples\nisEmpty(1);             // false\nisEmpty([]);            // true\nisEmpty([1, 2, 3]);     // false\n```\n\n3. 拷贝一个数组\n\n``` javascript\n// `arr` is an array\nconst clone = arr => arr.slice(0);\n\n// Or\nconst clone = arr => arr.concat([]);\n\n// Or\nconst clone = arr => [...arr];\n\n// Or\nconst clone = arr => Array.from(arr);\n\n// Or\nconst clone = arr => arr.map(v => v);\n```\n\n4. 对比两个数组是否一样\n   \n``` javascript\nconst isEqual = (arr1, arr2) => arr1.length === arr2.length && arr1.every((v, i) => v === arr2[i]);\n\n// Examples\nisEqual([1, 2, 3], [1, 2, 3]);      // true\nisEqual([1, 2, 3], [1, '2', 3]);    // false\n```\n\n5. 根据某个属性将数组转化为对象（属性作为key）\n\n``` javascript\nconst toObject = (arr, key) => arr.reduce((a, b) => ({...a, [b[key]]: b}), {});\n\n// Example\ntoObject(\n    [\n        { id: '1', name: 'Alpha', gender: 'Male' },\n        { id: '2', name: 'Bravo', gender: 'Male' },\n        { id: '3', name: 'Charlie', gender: 'Female' },\n    ],\n    'id'\n);\n/* \n{\n    '1': { id: '1', name: 'Alpha', gender: 'Male' },\n    '2': { id: '2', name: 'Bravo', gender: 'Male' },\n    '3': { id: '3', name: 'Charlie', gender: 'Female' },\n}\n*/\n```\n\n6. 找出数组中最大的值（Number）\n\n``` javascript\nconst indexOfMax = arr => arr.reduce((prev, v, i, a) => v > a[prev] ? i : prev, 0);\n\n// Examples\nindexOfMax([1, 3, 9, 7, 5]);        // 2\nindexOfMax([1, 3, 7, 7, 5]);        // 2\n```\n\n7. 根据属性找出数组中属性值最大的\n\n``` javascript\nconst maxBy = (arr, key) => arr.reduce((a, b) => a[key] >= b[key] ? a : b, {});\n\n// Example\nconst people = [\n    { name: 'Bar', age: 24 },\n    { name: 'Baz', age: 32 },\n    { name: 'Foo', age: 42 },\n    { name: 'Fuzz', age: 36 },\n];\nmaxBy(people, 'age');   // { name: 'Foo', age: 42 }\n```\n\n8. 数组去重\n\n``` javascript\nconst unique = arr => Array.from(new Set(arr));\n\n// Or\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\n```\n\n9. 以属性值为key将数组转化成对象\n\n``` javascript\nconst groupBy = (arr, key) => arr.reduce((acc, item) => ((acc[item[key]] = [...(acc[item[key]] || []), item]), acc), {});\n\n// Example\ngroupBy([\n    { branch: 'audi', model: 'q8', year: '2019' },\n    { branch: 'audi', model: 'rs7', year: '2020' },\n    { branch: 'ford', model: 'mustang', year: '2019' },\n    { branch: 'ford', model: 'explorer', year: '2020' },\n    { branch: 'bmw', model: 'x7', year: '2020' },\n], 'branch');\n\n/*\n{\n    audi: [\n        { branch: 'audi', model: 'q8', year: '2019' },\n        { branch: 'audi', model: 'rs7', year: '2020' }\n    ],\n    bmw: [\n        { branch: 'bmw', model: 'x7', year: '2020' }\n    ],\n    ford: [\n        { branch: 'ford', model: 'mustang', year: '2019' },\n        { branch: 'ford', model: 'explorer', year: '2020' }\n    ],\n}\n*/\n```\n\n10. 根据属性值给数组排序\n\n``` javascript\nconst sortBy = (arr, k) => arr.concat().sort((a, b) => (a[k] > b[k]) ? 1 : ((a[k] < b[k]) ? -1 : 0));\n\n// Example\nconst people = [\n    { name: 'Foo', age: 42 },\n    { name: 'Bar', age: 24 },\n    { name: 'Fuzz', age: 36 },\n    { name: 'Baz', age: 32 },\n];\nsortBy(people, 'age');\n\n// returns\n//  [\n//      { name: 'Bar', age: 24 },\n//      { name: 'Baz', age: 32 },\n//      { name: 'Fuzz', age: 36 },\n//      { name: 'Foo', age: 42 },\n//  ]\n```\n\n## DOM\n\n1. 判断是否为某个元素的子节点\n\n``` javascript\nconst isDescendant = (child, parent) => parent.contains(child);\n```\n\n2. 判断当前元素是否是Focus状态\n\n``` javascript\nconst isFocus = ele => ele === document.activeElement;\n```\n\n3. 判断页面是否滑到底部\n\n``` javascript\nconst isAtBottom = () => document.documentElement.clientHeight + window.scrollY >= document.documentElement.scrollHeight;\n```\n\n4. 当前浏览器判断\n\n``` javascript\n\n// IE\nconst isIE = !!document.documentMode;\n\n// Chrome\nconst isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\n\n// macOS browser\nconst isMacBrowser = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\n```\n\n5. 获取用户选中的文本\n\n``` javascript\nconst getSelectedText = () => window.getSelection().toString();\n```\n\n6. 隐藏元素\n  \n``` javascript\nconst hide = ele => ele.style.display = 'none';\n\n// Or\nconst hide = ele => ele.style.visibility = 'hidden';\n\n// Or\nconst hide = ele => ele.hidden = true;\n```\n\n7. 将元素插入某个元素之后\n\n``` javascript\nconst insertAfter = (ele, anotherEle) => anotherEle.parentNode.insertBefore(ele, anotherEle.nextSibling);\n\n// Or\nconst insertAfter = (ele, anotherEle) => anotherEle.insertAdjacentElement('afterend', ele);\n```\n\n8. 跳转页面\n\n``` javascript\nconst goTo = url => location.href = url;\n```\n\n9. 重新加载当前页\n\n``` javascript\nconst reload = () => location.reload();\n\n// Or\nconst reload = () => (location.href = location.href);\n```\n\n10. 替换元素\n\n``` javascript\nconst replace = (ele, newEle) => ele.parentNode.replaceChild(newEle, ele);\n```\n\n11. 回到页面顶部\n\n``` javascript\nconst goToTop = () => window.scrollTo(0, 0);\n```"},{"slug":"applyMiddleware","frontmatter":{"title":"redux源码系列之applyMiddleware","date":"June 28, 2021","description":null},"excerpt":"","content":"\n终于来到 **applyMiddleware** 部分，理解了 [**compose**](https://xudongdong.site/post/compose) 和 [**Currying**](https://xudongdong.site/post/currying)，这部分源码也变得很好理解\n\n这个方法是用来应用中间件的，用过 **node** 的同学应该比较了解，中间件我的理解类似于插件，一般为了避免系统框架过于臃肿，我们把常用的功能剥离开来，以中间件的形式插入到框架中来实现复杂的应用处理\n\n我们首先看下 **applyMiddleware** 的用法\n\n``` js\nimport { applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nconst store = createStore(reducer, applyMiddleware(thunk, logger))\n```\n\n**createStore** 内部的调用\n\n``` js\nfunction createStore(reducer, preloadedState, enhancer) {\n  // 传入参数的判断\n  // ...\n\n  // 参数中enhancer function存在，一般是指applyMiddleware()\n  if (typeof enhancer !== \"undefined\" && typeof enhancer === \"function\") {\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  // 省略\n}\n```\n\n由此可以得出 **applyMiddleware** 的 **API** 调用\n\n``` js\napplyMiddleware(thunk, logger)(createStore)(reducer, preloadedState);\n\n// applyMiddleware(...middlewares)(createStore)(reducer, preloadedState);\n```\n\n结合源码\n\n我们将源码中 **TS** 部分去除，得出函数主体代码\n\n``` javascript\nimport { compose } from \"./compose\";\n\nfunction applyMiddleware(...middlewares) {\n  // use Currying function\n  return (createStore) => (reducer, preloadedState) => {\n    // 获取store\n    const store = createStore(reducer, preloadedState);\n    // 初始化dispatch\n    let dispatch = () => {\n      // 在dispatch完成正在赋值之前，调用会报错\n      throw new Error(\"目前还不能使用dispatch\")\n    }\n\n    // 给每个中间件的默认传参：getState，dispatch\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action, ...args) => dispatch(action, ...args)\n    }\n    \n    // 加入默认参数后的中间件chain\n    const chain = middlewares.map(middleware => middleware(middlewareAPI))\n    // 对chain做compose操作，并赋值给dispatch\n    dispatch = compose(...chain)(store.dispatch)\n  }\n\n  // 返回store的属性和dispatch\n  return {\n    ...store,\n    dispatch\n  }\n}\n```\n\n主要难以理解的部分还是 **compose** 这一块\n\n我们拿两个中间件做解析\n\n``` javascript\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\napplyMiddleware(thunk, logger)(createStore)(reducer, preloadedState);\n\n// applyMiddleware chain部分\nconst middlewareAPI = { getState, dispatch }\n\nconst chain = [thunk, logger].map(middleware => middleware(middlewareAPI))\n// const chain = [thunk(middlewareAPI), logger(middlewareAPI)]\n// const chain = [thunk({ getState, dispatch }), logger({ getState, dispatch })]\n\n// applyMiddleware compose dispatch部分\ndispatch = compose(...chain)(store.dispatch)\n// dispatch = compose(thunk({ getState, dispatch }), logger({ getState, dispatch }))(store.dispatch)\n\n// 根据 compose 代码可转化为\n// dispatch = thunk({ getState, dispatch })(logger({ getState, dispatch })(store.dispatch))\n```\n\n代码到这边我们需要结合 **redux-thunk** 源码继续解析了\n\n``` js\nfunction createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) => (next) => (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n```\n\n把\n``` js\ndispatch = thunk({ getState, dispatch })(logger({ getState, dispatch })(store.dispatch))\n```\n\n放到 **thunk** 中\n\n``` js\ndispatch = ({ getState, dispatch }) => {\n  return ({ getState, dispatch }) => (logger({ getState, dispatch })(store.dispatch)) => (action) => {\n\n    // 如果有异步action，会先执行异步action，在执行传进来的logger function\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return logger({ getState, dispatch })(store.dispatch)(action);\n  }\n}\n```\n\n应用了 **thunk** 和 **logger** 的 **redux** 应用，会先执行异步 **action**，在执行 **logger** 中间件。\n\n从代码上看，**applyMiddleware** 最主要的作用就是对原始的 **dispatch** 方法进行了重新赋值，并将它与 **store** 的属性返回。\n\n\n## 参考\n- [redux-thunk](https://github.com/reduxjs/redux-thunk/blob/master/src/index.js)\n\n"},{"slug":"currying","frontmatter":{"title":"柯里化-Currying","date":"June 23, 2021","description":null},"excerpt":"","content":"\n之前看 **Redux compose** 部分源代码的时候，就感觉和 **柯里化（Currying）** 很像，所以这篇把它安排上了，同属于函数式编程范畴。\n\n## What\n\n什么是柯里化（Currying）\n\n**柯里化** 大家应该听说过，或许还有些了解，但是到底什么样的范式才是柯里化呢？\n\n>在维基百科上的定义是这样：***currying is the technique of converting a function that takes multiple arguments into a sequence of functions that each takes a single argument***.\n\n首先是一个技术，作用是将一个拥有多个参数的函数转化成一系列只能传入一个参数的函数。\n\n还是比较抽象，通过代码\n\n``` js\nconst add = (x) => (y) => x + y;\n```\n\n这种多 **=>** 的代码经常见，其实就是 **ES6** 版的柯里化，我们可以转化下\n\n觉得理解困难的可以借用 **[Babel](https://www.babeljs.cn/repl)** 来转化\n\n``` js\nvar add = function add(x) {\n  return function (y) {\n    return x + y;\n  };\n};\n```\n\n不用 **柯里化（Currying）**:\n\n``` js\nconst add = (a, b, c) => {\n  return a + b + c;\n}\n```\n\n在数学和计算机科学中的柯里化函数，一次只能传递一个参数；\n\n而我们 **Javascript** 实际应用中的柯里化函数，可以传递一个或多个参数。\n\n``` js\n//普通函数\nfunction fn(a, b, c, d, e) {\n  return a + b + c + d + e;\n}\n//生成的柯里化函数\nconst curryFn = curry(fn);\n\ncurryFn(1,2,3,4,5);     // 15\ncurryFn(1)(2)(3,4,5);   // 15\ncurryFn(1,2)(3,4)(5);   // 15\ncurryFn(1)(2)(3)(4)(5); // 15\n\n```\n\n那么什么时候应该用 **柯里化（Currying）** 呢，总不至于我们就是用来为了给三个数字求和。\n\n## When\n\n举个例子🌰\n\n科颜氏有一款爆火的爽肤水，经常会有活动促销打折，打折力度往往不一样\n\n所以他们会这样计算折后价格\n\n``` js\nconst discountPrice = (price, dicount) => {\n  return price * dicount;\n}\n\ndiscountPrice(300, 0.9);\ndiscountPrice(300, 0.95);\ndiscountPrice(300, 0.85);\ndiscountPrice(300, 0.88);\n```\n\n其实我们会发现，虽然折扣经常变，但是它本身的价格基本不变\n\n所以我们可以用 **柯里化（Currying）** 优化下代码结构\n\n``` js\nconst defaultPrice = 300; // 爽肤水默认价格\n\nconst discountPrice = (price) => {\n  return (dicount) => {\n    return price * dicount;\n  }\n}\n\n// const discountPrice = price => dicount => price * dicount\n\nconst tonerdDscountPrice = discountPrice(defaultPrice);\n\ntonerdDscountPrice(0.9);\ntonerdDscountPrice(0.95);\ntonerdDscountPrice(0.85);\ntonerdDscountPrice(0.88);\n```\n\n下面的代码是不是调用的时候更加舒爽一点\n\n## Why\n\n那么 **柯里化（Currying）** 有啥好处呢\n\n柯里化本质上是 ***降低通用性，提高适用性***。\n\n怎么理解...\n\n结合打折的例子看，\n\n降低通用性是指 **Currying** 之前，我们可以灵活的传入默认价格，我可以算出爽肤水折扣价格，也可以算出面膜折扣价格，很通用\n\n但是 **Currying** 之后更加适用于算出爽肤水折扣价格了，都不用传入默认价格了，提取了一个通用的方法对默认价格进行处理，只要传入折扣价格\n\n所以，关于使用其实是个取舍问题，需结合具体场景\n\n\n\n\n\n\n\n## 参考\n- [currying-javascript](https://www.dottedsquirrel.com/currying-javascript/)\n- [wiki-Currying](https://en.wikipedia.org/wiki/Currying)\n- [javascript-currying-what-is-the-point-of-currying-javascript-functions](https://www.jondjones.com/frontend/javascript/functional-programming/javascript-currying-what-is-the-point-of-currying-javascript-functions/)\n- [「前端进阶」彻底弄懂函数柯里化](https://juejin.cn/post/6844903882208837645)"},{"slug":"compose","frontmatter":{"title":"redux源码系列之compose","date":"June 23, 2021","description":null},"excerpt":"","content":"\n本来想写 **applyMiddleware** 方法代码解析的，然后一看，里面有个 **compose** 方法，好像内部代码也调用的比较多，想了想就决定先看下 **compose** 相关代码。\n\n``` javascript\nimport { compose } from 'redux'\n\nconst composeFn = compose(fn1, fn2, fn3, fn4)\nconst b = composeFn(x)\n// 等价于\nconst b = fn1(fn2(fn3(fn4(x))))\n```\n从使用上大概可以看出它的作用，从右往左的组合执行多个函数，将多个函数组合成一个函数，右边函数的执行结果是左边函数的参数值，\n除了最右边的函数可以传入多个参数，其余函数只能传入一个参数。\n\n## 参数\n1. **(arguments)**: 需要组合的函数。\n\n## 返回值\n**(Function)**: 从右到左把接收到的函数合成后的最终函数。\n\n## 代码结构\n代码算是很简单了，我们分两部分去理解\n\n### 上半部分\n\n``` typescript\nexport default function compose(): <R>(a: R) => R\n\nexport default function compose<F extends Function>(f: F): F\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(\n  f1: (a: A) => R,\n  f2: Func<T, A>\n): Func<T, R>\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(\n  f1: (b: B) => R,\n  f2: (a: A) => B,\n  f3: Func<T, A>\n): Func<T, R>\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(\n  f1: (c: C) => R,\n  f2: (b: B) => C,\n  f3: (a: A) => B,\n  f4: Func<T, A>\n): Func<T, R>\n\n/* rest */\nexport default function compose<R>(\n  f1: (a: any) => R,\n  ...funcs: Function[]\n): (...args: any[]) => R\n\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R\n\nexport default function compose(...funcs: Function[]) {\n  \n}\n```\n\n声明各种不同参数的 **compose**，其实是重载，为了写代码时有更好的代码提示。\n\n### 核心部分\n``` typescript\nreturn funcs.reduce(\n  (a, b) =>\n    (...args: any) =>\n      a(b(...args))\n)\n```\n最后 **compose return** 的是函数数组（即传入的参数）的 **reduce** 方法，显而易见的能组合成高阶函数的形式。\n\n## 总结\n\n``` javascript\ncompose(fn1, fn2, fn3, fn4)(...args) === fn1(fn2(fn3(fn4(...args))))\n```\n\n**compose** 函数在函数式编程里很常见。这里 **redux** 的对 **compose** 实现很简单，主要还是要对 **Array.prototype.reduce** 函数要熟练。\n\n"},{"slug":"createStore","frontmatter":{"title":"redux源码系列之createStore","date":"June 23, 2021","description":"深入源码解析createStore内部代码"},"excerpt":"","content":"\n``` javascript\nconst store = createStore(reducer, [initState, enhancer])\n```\n\n## 参数\n\n1. [**reducer**](https://redux.js.org/understanding/thinking-in-redux/glossary#reducer) (*Function*):  接受两个参数，分别是当前的 **state** 和要处理的 [**action**](https://redux.js.org/tutorials/fundamentals/part-2-concepts-data-flow#actions)\n\n2. [**preloadedState**] (*any*):  初始状态的 **state**，其实在实际开发中很少在这边给应用赋上初始 **state**，一般会在各自的 **reducer** 中赋上初始 **state**: \n\n``` javascript\nconst initialState = {}\n\n  // reducer\nconst todoApp = (state = initialState, action) => {\n  // 这里暂不处理任何 action，\n  // 仅返回传入的 state。\n  return state\n}\n```\n值得注意的是: 通常情况下，通过 **preloadedState** 指定的 **state** 要优先于通过 **reducer** 指定 **state** : \n\n``` javascript\nimport { createStore } from 'redux';\n// reducer\nconst a = (state = 'lol', action) => {\n  return state;\n}\n\nconst b = (state = 'wat', action) => {\n  return state;\n}\n\n// const combined = combineReducers({ a, b })\nconst combined = (state = {}, action) => {\n  return {\n    a: a(state.a, action),\n    b: b(state.b, action)\n  };\n}\n\nconst store = createStore(combined, { a: 'horse' });\nconsole.log(store.getState()); // { a: 'horse', b: 'wat' }\n```\n\n3. [**enhancer**] (*Function*):  高阶函数，通常是指中间件，必须用 **applyMiddleware()** 包装下：\n\n``` javascript\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nfunction logger({ getState }) {\n  return next => action => {\n    console.log('will dispatch', action)\n\n    // Call the next dispatch method in the middleware chain.\n    const returnValue = next(action)\n\n    console.log('state after dispatch', getState())\n\n    // This will likely be the action itself, unless\n    // a middleware further in chain changed it.\n    return returnValue\n  }\n}\n\nconst store = createStore(todos, applyMiddleware(thunk, logger))\n```\n\n## 返回值\n[**store**](https://redux.js.org/api/store): 是一个对象，包含了一些方法（[**dispatch**](https://redux.js.org/api/store#dispatchaction)，[**getState**](https://redux.js.org/api/store#getstate)等)，保存了应用所有 **state** 的对象。改变 **state** 的惟一方法是 **dispatch action**。\n\n``` typescript\nconst store = {\n  dispatch: dispatch as Dispatch<A>,\n  subscribe,\n  getState,\n  replaceReducer,\n  [$$observable]: observable\n} as unknown as Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext\nreturn store\n```\n\n## 代码结构\n便于理解，我们忽略函数中 **TS** 的一些类型定义，大致结构如下：\n\n``` javascript\nfunction createStore(reducer, preloadedState, enhancer) {\n  // 传入参数的判断\n  // ...\n\n  // 参数中enhancer function存在，一般是指applyMiddleware()\n  if (typeof enhancer !== \"undefined\" && typeof enhancer === \"function\") {\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  let currentReducer = reducer; // 当前store中的reducer\n  let currentState = preloadedState; // 当前store中存储的状态\n  let currentListeners = []; // 当前store中放置的监听函数\n  let nextListeners = currentListeners; // 下一次dispatch时的监听函数\n  let isDispatching = false; // 用于判断是否正在dispatch\n\n  // 获取state\n  function getState() {\n    //...\n  }\n\n  // 添加一个监听函数，每当dispatch被调用的时候都会执行这个监听函数\n  function subscribe() {\n    //...\n  }\n\n  // 触发了一个action，因此我们调用reducer，得到的新的state，并且执行所有添加到store中的监听函数。\n  function dispatch() {\n    //...\n  }\n\n  // 忽略两个不常用的方法replaceReducer，observable...\n\n  // createStore的时候会执行一次INIT action的dispatch\n  // 便于其他reducer获取初始值\n  dispatch({ type: ActionTypes.INIT } as A);\n\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    //下面两个是主要面向库开发者的方法，暂时先忽略\n    //replaceReducer,\n    //observable\n  };\n}\n```\n\n可以看出，**createStore** 方法创建了一个 **store**，但是并没有直接将这个 **store** 的状态 **state** 返回，而是返回了一系列方法，外部可以通过这些方法（**getState**）获取 **state**，或者间接地（通过调用 **dispatch** ）改变 **state**。\n\n下面我们来看下各个方法的具体实现\n\n### getState\n\n``` typescript\nfunction getState(): S {\n  // 如果正在dispath会抛出异常\n  if (isDispatching) {\n    throw new Error(\n      'You may not call store.getState() while the reducer is executing. ' +\n        'The reducer has already received the state as an argument. ' +\n        'Pass it down from the top reducer instead of reading it from the store.'\n    )\n  }\n\n  return currentState as S\n}\n```\n\n很简单，就是获取当前 **state**，我们可以通过 ``` store.getState() = ... ``` 来修改 **state**，但是一般来说，redux不建议这样做，只能通过 **dispatch action** 来修改 **state**。\n\n### subscribe\n\n``` typescript\n  // 若相等，做一下currentListeners浅拷贝\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  function subscribe(listener: () => void) {\n    if (typeof listener !== 'function') {\n      // throw Error\n    }\n    if (isDispatching) {\n      // throw Error\n    }\n    //设置一个标志，标志该监听器已经订阅了\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    // push到nextListeners数组中，下次dispatch会调用\n    nextListeners.push(listener)\n\n    // 返回了一个取消订阅的函数，即从数组中删除该监听函数\n    return function unsubscribe() {\n      // 如果已经取消订阅过了，直接返回\n      if (!isSubscribed) {\n        return\n      }\n      if (isDispatching) {\n        // throw Error\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      // 从下一轮的监听函数数组（用于下一次dispatch）中删除这个监听器。\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n      // 清空当前currentListeners\n      currentListeners = null\n    }\n  }\n```\n\n### dispatch\n\n``` typescript\nfunction dispatch(action: A) {\n  if (!isPlainObject(action)) {\n    // throw Error\n  }\n\n  if (typeof action.type === 'undefined') {\n    // throw Error\n  }\n\n  if (isDispatching) {\n    // throw Error\n  }\n\n  try {\n    // 标记正在dispatch\n    isDispatching = true\n    // 调用reducer，得到新state\n    currentState = currentReducer(currentState, action)\n  } finally {\n    isDispatching = false\n  }\n\n  const listeners = (currentListeners = nextListeners)\n  // 遍历执行监听数组中的所有监听函数\n  for (let i = 0; i < listeners.length; i++) {\n    const listener = listeners[i]\n    listener()\n  }\n\n  // 返回传入的action\n  return action\n}\n```\n\n**dispatch** 是修改 **state** 的唯一途径（**redux** 规定）。\n\n## 总结\n整个 **createStore** function 还是比较容易理解的，记住应用中应有且仅有一个 store。\n\n## 参考\n- [Redux createStore API](https://redux.js.org/api/createstore)\n- [Redux createStore API（中文版）](https://www.redux.org.cn/docs/api/createStore.html)\n"},{"slug":"RESTful","frontmatter":{"title":"RESTful资源命名规范","date":"June 8, 2021","description":"资源路径如何正确的定义？应该遵守怎样的命名规范？"},"excerpt":"","content":"\n在 **REST** 中，主要的数据描述称为 **Resource**，拥有明确一致的 **REST** 命名规范，长期来看将是最好的决策\n\n> 资源可以是单例或者集合，比如说，customers是一个集合资源，customer是一个单个资源。我们在URI中可以用\"/customers\"来定义集合资源，用\"/customers/{customerId}\"来定义单个资源。\n\n> 一个资源也可以包含子集合资源，比如说，一个顾客他名下有多个account，我们可以这样\"/customers/{customerId}/accounts\"表示。相同的，单独表示某个顾客的某个账号，我们可以这样\"/customers/{customerId}/accounts/{accountId}\"。\n\n## Tips\n1. 使用名词表示资源（而不是动词）\n\n\n2. 使用\"/\"表示层次关系\n\n```url\nhttp://api.example.com/customers/{customerId}/accounts/{accountId}\n```\n\n\n3. 结尾不需要加\"/\"\n\n```url\nhttp://api.example.com/device-management/managed-devices/\n\n//better\nhttp://api.example.com/device-management/managed-devices\n```\n\n4. 用\"-\"代替驼峰的命名方式，提高可读性,\n   也不要使用下划线\"_\"（某些字体下会显示不明显，或者被遮盖）\n\n```url\nhttp://api.example.com/inventoryManagement/managedEntities/{id}/installScriptLocation \n\nhttp://api.example.com/inventory_management/managed_entities/{id}/install_script_location\n\n//better\nhttp://api.example.com/inventory-management/managed-entities/{id}/install-script-location\n```\n\n5. 使用小写字母\n\n\n6. 不要加文件后缀\n\n```url\nhttp://api.example.com/device-management/managed-devices.xml  /*Do not use it*/\n\nhttp://api.example.com/device-management/managed-devices \t/*This is correct URI*/\n```\n\n7. 不要使用CRUD的一些方法名词（例如：getXXX，deletXXX，与第一点类似）\n\n```url\nHTTP GET http://api.example.com/device-management/managed-devices  //Get all devices\nHTTP POST http://api.example.com/device-management/managed-devices  //Create new Device\n\nHTTP GET http://api.example.com/device-management/managed-devices/{id}  //Get device for given Id\nHTTP PUT http://api.example.com/device-management/managed-devices/{id}  //Update device for given Id\nHTTP DELETE http://api.example.com/device-management/managed-devices/{id}  //Delete device for given Id\n```\n\n\n8. 用query形式来过滤资源集合（区别于params形式，理解）\n```url\nhttp://api.example.com/device-management/managed-devices\n\nhttp://api.example.com/device-management/managed-devices?region=USA\nhttp://api.example.com/device-management/managed-devices?region=USA&brand=XYZ\nhttp://api.example.com/device-management/managed-devices?region=USA&brand=XYZ&sort=installation-date\n```\n\n\n## 参考：\n- [resource-naming](https://restfulapi.net/resource-naming)\n"},{"slug":"sass-summary","frontmatter":{"title":"Sass总结篇","date":"June 7, 2021","description":"Sass的常用功能总结"},"excerpt":"","content":"\n以前只用过嵌套和变量，所以在脑子里CSS预处理器就这点功能。\n\n最近准备看下Sass文档，学习和总结下，看了中文文档有些翻译确实让人看不太懂，所以决定对着英文文档自己啃。\n\n本准备像上一篇一样，把英文文档逐篇翻译，后来想想算了，所以总结了Sass常用的一些功能点。\n\n## 变量\n\n变量以 **$** 开头，非驼峰写法，以 **-** 做命名切割\n\n![sass-variable](sass-variable.jpeg)\n\n⚠️**注意**：原生CSS也是带有变量功能的，命名以 **--** 开头，点击[这里](https://sass-lang.com/documentation/variables)查看具体的区别\n\n\n## 嵌套\n\n原生CSS是不支持嵌套写法的，但有个相关的[草案](https://drafts.csswg.org/css-nesting-1)，相信不久的将来也会支持\n\n![sass-css-nesting](sass-css-nesting.jpeg)\n\n用Sass我们可以这样写\n\n![sass-css-nesting](sass-nesting.jpeg)\n\n嵌套写法也是我们大部分人最常用的功能，没有之一。。。\n\n⚠️**注意**：嵌套是很有用，但也是很容易滥用的地方，一般建议嵌套不超过三层，否则会影响性能，在Sass中还提供了一个[@at-root](https://sass-lang.com/documentation/at-rules/at-root) 的功能，可以让你直接跳出去。这样也可以避免嵌套层级过深。\n\n\n## 父选择器（&）\n\n在嵌套中，我们用 **&** 来表示当前位置的父类节点，通常在写伪类的时候会用到\n\n![sass-&](sass-&.jpeg)\n\n## 占位符选择器（placeholder）\n\n占位符选择器以 **%** 开头，通过 **@extend** 来应用\n\n![sass-placeholder](sass-placeholder.jpeg)\n\n编译出来的CSS代码中并不会包括 **%placeholder** 规则中的样式，除非是通过 **@extend** 对其进行调用\n\n它和 **mixin** 的使用也很像，但是还是有区别\n\n### mixin\n\n![sass-placeholder-mixin](sass-placeholder-mixin.jpeg)\n\n### placeholder\n\n![sass-placeholder1](sass-placeholder1.jpeg)\n\n## 继承（@extend）\n\n所谓 **@extend** 用法就是你为通用样式写一个 **.** 样式类，然后要用到改样式的地方再 **@extend**\n\n![sass-extend](sass-extend.jpeg)\n\n我们可以从上图中很直接的看出它与 **%placeholder** 的区别\n\n还有一个问题，**.icon** 类我们在 **Html** 中不会用到，因为它仅仅是用来被 **@extend** 的，我们可以使用 **%placeholder** 来解决这种现象\n\n## mixin\n\n**mixin** 前面介绍占位符的时候也稍待介绍下，它主要用来修饰 **function** ，可以传入参数，也可以给参数设置个默认值\n\n![sass-mixin](sass-mixin.jpeg)\n\n## SassScript相关\n\n### @if和@else\n\n流程控制指令一般会配合 **mixin** 一起使用\n\n![sass-if-else](sass-if-else.jpeg)\n\n### @for\n\n![sass-for](sass-for.jpeg)\n\n\n### @while\n\n![sass-while](sass-while.jpeg)\n\n\n## 参考\n- [掌握sass这些技能，帮助提升开发效率](https://juejin.cn/post/6870009638478151688)\n- [your-nesting-is-harmful](https://medium.com/@verpixelt/your-nesting-is-harmful-a1ffddaf7e43)\n- [your-placeholder-selectors](https://sass-lang.com/documentation/style-rules/placeholder-selectors)\n\n\n\n"},{"slug":"sass-syntax","frontmatter":{"title":"Sass语法篇","date":"May 28, 2021","description":"Sass的基本语法，以及语法声明和表达式介绍"},"excerpt":"","content":"\n## Sass支持两种语法，你可以根据喜好随意选择其中一种。\n\n## SCSS\n\nSCSS语法应用于后缀为 **.scss** 的文件，它是CSS的超集，那就意味着大多数情况下 ***合法的CSS写法也适用于SCSS***。\n\n\n``` css\n@mixin button-base() {\n  @include typography(button);\n  @include ripple-surface;\n  @include ripple-radius-bounded;\n\n  display: inline-flex;\n  position: relative;\n  height: $button-height;\n  border: none;\n  vertical-align: middle;\n\n  &:hover { cursor: pointer; }\n\n  &:disabled {\n    color: $mdc-button-disabled-ink-color;\n    cursor: default;\n    pointer-events: none;\n  }\n}\n```\n\n\n## 缩进式语法（SASS）\n\n这是Sass最原先的语法，应用于后缀为 **.sass** 的文件，缩进语法支持SCSS语法的一眼的功能，只是在写法上会用缩进的形式代替花括号和分号。\n\n通常来讲，你如果想用花括号来表示结构的时候，你可以使用代码缩进来表示，每行结束的时候，即视为分号，这里只包括了基本的写法区别，其余的区别在后续的文档中会提到\n\n\n```css\n@mixin button-base()\n  @include typography(button)\n  @include ripple-surface\n  @include ripple-radius-bounded\n\n  display: inline-flex\n  position: relative\n  height: $button-height\n  border: none\n  vertical-align: middle\n\n  &:hover\n    cursor: pointer\n\n  &:disabled\n    color: $mdc-button-disabled-ink-color\n    cursor: default\n    pointer-events: none\n```\n\n## 和CSS一样，大部分Sass样式表是由包含属性声明的样式规则组成。但是Sass样式表还包含其他的一些功能\n\n## 声明\n\nSass样式表由一系列声明组成，一些声明会包含语法块，通常由 **{}** 表示，语法块中还会包含其他声明，例如属性声明。\n\n在Scss中，声明由分号分隔开，在缩进语法（.sass）中，只需换行即可。\n\n### 通用声明\n\n这些声明可以在Sass样式表中任何地方使用：\n\n- [变量声明](https://sass-lang.com/documentation/variables)，比如： **$var: value**\n- [流程控制规则](https://sass-lang.com/documentation/at-rules/control)，比如： **@if** and **@each**\n- [@error](https://sass-lang.com/documentation/at-rules/error)，[@warn](https://sass-lang.com/documentation/at-rules/warn) 和 [@debug](https://sass-lang.com/documentation/at-rules/debug)规则\n\n### CSS声明\n\n这些声明生成CSS，它们可以在除 **@function** 的任何地方使用：\n- [Style规则](https://sass-lang.com/documentation/style-rules)，比如 **h1 { /* ... */ }**\n- [CSS规则](https://sass-lang.com/documentation/at-rules/css)，比如 **@media** 和 **@font-face**\n- [Mixin](https://sass-lang.com/documentation/at-rules/mixin)使用 **@include**\n- [@at-root规则](https://sass-lang.com/documentation/at-rules/at-root)\n\n### 顶级声明\n\n这些声明只能在样式表最上面或者CSS语法块最外层使用：\n- [模块加载](https://sass-lang.com/documentation/at-rules/use)，使用 **@use**\n- [引入](https://sass-lang.com/documentation/at-rules/import)，使用 **@import**\n- [Mixin定义](https://sass-lang.com/documentation/at-rules/mixin)，使用 **@mixin**\n- [Function定义](https://sass-lang.com/documentation/at-rules/function)，使用 **@function**\n\n### 其余声明\n- [属性声明](https://sass-lang.com/documentation/style-rules/declarations)，比如 **width: 100px** 只能在 **Style规则** 和 **CSS规则** 中使用\n- [@extend规则](https://sass-lang.com/documentation/at-rules/extend)只能在 **Style规则** 中使用\n\n## 表达式\n\n表达式通常指属性右侧部分或者是变量声明，所有表达式最后都会生成一个值。任何有效的CSS属性值都可以是Sass表达式，但是Sass表达式包含更丰富强大的功能。它们可以将参数传递给 **mixins** 和 **functions**，用 **@if rule** 控制流程，并用算法进行操作。我们把Sass表达式称为 **SassScript** 语法。\n\n### 文值\n\n最简单的表达式就是静态的值：\n- [Numbers](https://sass-lang.com/documentation/values/numbers)，可以有单位，比如 **12** 或 **100px**\n- [Strings](https://sass-lang.com/documentation/values/strings)，可以有引号，比如 **\"Helvetica Neue\"** 或 **blod**\n- [Colors](https://sass-lang.com/documentation/values/colors)，可以用颜色代码或者颜色名表示，比如 **#c6538c** 或 **blue**\n- [boolean](https://sass-lang.com/documentation/values/booleans)， **true** 或者 **false**\n- [null](https://sass-lang.com/documentation/values/null)\n- [值列表](https://sass-lang.com/documentation/values/lists)，由空格，逗号或者 **[]** 来隔开，比如：**1.5em 1em 0 2em, Helvetica, Arial, sans-serif** 或者 **[col1-start]**\n- [Maps](https://sass-lang.com/documentation/values/maps)会把 **key** 和 **value** 联系起来，比如： **(\"background\": red, \"foreground\": pink)**\n\n### 运算\n\nSass为数字运算定义了语法：\n- [== 和 !=](https://sass-lang.com/documentation/operators/equality)用来检查两个值是否相等\n- [+, -, *, /, 和 %](https://sass-lang.com/documentation/operators/numeric)用来对数字进行常用的算数计算，加上单位会有特殊的意义\n- [<, <=, >, 和 >=](https://sass-lang.com/documentation/operators/relational)用来检查两个值哪个大，哪个小\n- [and, or 和 not](https://sass-lang.com/documentation/operators/boolean)用来表示布尔行为，Sass认为除了 **false** 和 **null** 其余的都为 **true**\n- [+, - 和 /](https://sass-lang.com/documentation/operators/string)可用于连接字符串\n- [( and )](https://sass-lang.com/documentation/operators#parentheses)可用于显式控制操作的优先顺序\n\n\n### 其余表达式\n- [变量](https://sass-lang.com/documentation/variables)，比如 **$var**\n- [函数调用](https://sass-lang.com/documentation/at-rules/function)，比如 **nth($list, 1)** 或者 **var(--main-bg-color)** ，可以调用Sass核心库函数或用户定义的函数，也可以直接编译为CSS\n- [特定函数](https://sass-lang.com/documentation/syntax/special-functions)，比如 **calc(1px + 100%)**，**url(http://myapp.com/assets/logo.png)** 具有自己独特的解析规则\n- [父级选择器](https://sass-lang.com/documentation/style-rules/parent-selector)， **&**\n- **!important**，被解析为无引号的字符串\n\n\n## 参考\n- [sass-syntax](https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/)"},{"slug":"npm-vs-npx","frontmatter":{"title":"npx是什么","date":"May 26, 2021","description":"npx和npm的区别是啥，npx能解决npm的哪些痛点"},"excerpt":"","content":"\n\n如果你曾经用过Node.js，那你一定用过npm。\n\n**npm**(node package manager)是你安装Node.js之后开箱即用的包依赖管理工具。开发者可以通过它本地或全局安装依赖库。\n\n有时候你可能只是想了解下某些库，然后试一试它的一些命令，但是你不在本地  **node_modules**  文件夹安装相关的库你是无法尝试它的指令的。\n\n这就是 **npx** 出现的原因。\n\n本文我们讲着重看一看两者的区别，学会在合适的场景使用它们。\n\n首先，让我们先来了解下 **npm** 到底是什么，我们可以通过它来干些啥。\n\n## npm the package manager\n\n它是一个在线资源库，用于发布开源的Node.js项目\n\n它是一个CLI（命令行）工具，可以帮助你安装库并管理其版本和依赖（npm上又成千上万的Node.js库和应用，而且每天都在增加）\n\nnpm本身不会运行任何库，如果你想使用npm来运行某些库，你必须要在你的 **package.json** 文件中声明\n\n当npm执行安装库的指令时（npm install xxx)，npm会创建指向它们的链接\n1. 本地安装会在 **./node_modules/.bin/** 文件夹中创建链接\n2. 全局安装会在全局的 **bin/** 文件夹下创建链接（例如：Linux系统是 **/usr/local/bin** ，Windows系统是 **%AppData%/npm** ）\n\n你可以这样执行库\n\n``` bash\n$ ./node_modules/.bin/your-package\n```\n或者可以通过在package.json里添加脚本来执行\n\n``` json\n{\n  \"name\": \"your-application\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"your-package\": \"your-package\"\n  }\n}\n```\n然后你可以运行指令：\n\n``` node\nnpm run your-package\n```\n\n你可以看到通过 **npm** 运行库还是要花不少时间的。\n\n庆幸的是，**npx** 可以派上用场了。\n\n## npm the package runner\n\n从 **npm**5.2.0版本开始，安装 **npm** 会预安装上 **npx**。\n\n**npx** 也是CLI（命令行）工具，其目的是使得安装和管理 **npm** 依赖库更加容易。\n\n现在可以很简单的运行通过 **npm** 安装的任何基于Node.js的可执行文件。\n\n你可以通过以下指令查看你当前 **npm** 版本是否已经安装了 **npx** ：\n\n``` dash\n$ which npx\n```\n如果没有，可以通过以下指令安装：\n``` dash\n$ npm install -g npx\n```\n\n确定安装好之后，我们通过一些用例来看看 **npx** 是多么的方便有用。\n\n## Run a locally installed package easily\n\n如果要执行本地安装的库，只需输入：\n``` dash\n$ npx your-package\n```\n**npx** 将检查 **$ PATH** 或本地项目二进制文件中是否存在 **<command>** 或 **<package>** ，如果存在，它将执行该命令。\n\n## Execute packages that are not previously installed\n\n另一个主要优点是能够执行未安装的库。\n\n有时，您只是想使用某些库的命令行指令，但不想安装它们。 这意味着你可以节省一些磁盘空间，仅在需要它们时才安装它们。\n\n## Run code directly from GitHub\n\n![execute-gist-scripts-with-npx](execute-gist-scripts-with-npx.jpeg)\n\n这很酷！\n\n你可以使用 **npx** 运行任何 **GitHub gists** 和仓库。 让我们集中精力执行 **GitHub gists** ，因为它更容易创建。\n\n在[这里](https://gist.github.com/Tynael/0861d31ea17796c9a5b4a0162eb3c1e8)，你可以找到此示例代码。\n\n在执行之前，请确保仔细阅读所有 script，以避免由于恶意代码而导致的严重问题。\n\n## 总结\n\n**npx** 帮助我们避免安装仅仅想尝试的不必要的库\n\n它还提供了一种通过直连 **GitHub gists** 或 **仓库** 来执行包命令的更简单快捷的方式\n\n如果您以前从未使用过 **npx**，那么现在是开始的好时机！\n\n## 参考\n- [npm-vs-npx-whats-the-difference](https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/)"}]},"__N_SSG":true}