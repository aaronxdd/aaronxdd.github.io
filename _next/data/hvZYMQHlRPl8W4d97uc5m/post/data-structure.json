{"pageProps":{"frontmatter":{"title":"数据结构笔记","date":"June 30, 2021","description":null},"post":{"content":"\n## 存储方式\n\n### 数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）\n\n散列表、栈、队列、堆、树、图等等各种数据结构都属于上层建筑，而数组和链表才是「结构基础」。\n\n### 两者优缺点\n\n**数组**\n\n1. 由于是连续存储，可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间，访问数组元素的时间复杂度 O(1)；\n2. 但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。\n\n**链表**\n\n1. 因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；\n2. 如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。\n3. 但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。\n\n\n## 基本操作\n\n数据结构的基本操作无非遍历 + 访问，即增删改查；\n\n但是不同数据结构的增删改查的效率是不一样的，所以我们需要了解各数据结构的特性以便我们在不同场景下提高代码的性能。\n\n遍历 + 访问 分为两种形式：线性的和非线性的。\n\n线性：以for/while 迭代为代表\n\n非线性：以递归为代表\n\n\n","excerpt":""},"previousPost":{"slug":"method","frontmatter":{"title":"js常用方法集合（一）","date":"June 30, 2021","description":null},"excerpt":"","content":"\n## Array\n\n1. 将输入值转化为数组\n\n``` javascript\nconst castArray = value => Array.isArray(value) ? value : [value];\n\n// Examples\ncastArray(1);               // [1]\ncastArray([1, 2, 3]);       // [1, 2, 3]\n```\n\n2. 判断数组是否为空\n\n``` javascript\nconst isEmpty = arr => Array.isArray(arr) && arr.length === 0;\n\n// Examples\nisEmpty(1);             // false\nisEmpty([]);            // true\nisEmpty([1, 2, 3]);     // false\n```\n\n3. 拷贝一个数组\n\n``` javascript\n// `arr` is an array\nconst clone = arr => arr.slice(0);\n\n// Or\nconst clone = arr => arr.concat([]);\n\n// Or\nconst clone = arr => [...arr];\n\n// Or\nconst clone = arr => Array.from(arr);\n\n// Or\nconst clone = arr => arr.map(v => v);\n```\n\n4. 对比两个数组是否一样\n   \n``` javascript\nconst isEqual = (arr1, arr2) => arr1.length === arr2.length && arr1.every((v, i) => v === arr2[i]);\n\n// Examples\nisEqual([1, 2, 3], [1, 2, 3]);      // true\nisEqual([1, 2, 3], [1, '2', 3]);    // false\n```\n\n5. 根据某个属性将数组转化为对象（属性作为key）\n\n``` javascript\nconst toObject = (arr, key) => arr.reduce((a, b) => ({...a, [b[key]]: b}), {});\n\n// Example\ntoObject(\n    [\n        { id: '1', name: 'Alpha', gender: 'Male' },\n        { id: '2', name: 'Bravo', gender: 'Male' },\n        { id: '3', name: 'Charlie', gender: 'Female' },\n    ],\n    'id'\n);\n/* \n{\n    '1': { id: '1', name: 'Alpha', gender: 'Male' },\n    '2': { id: '2', name: 'Bravo', gender: 'Male' },\n    '3': { id: '3', name: 'Charlie', gender: 'Female' },\n}\n*/\n```\n\n6. 找出数组中最大的值（Number）\n\n``` javascript\nconst indexOfMax = arr => arr.reduce((prev, v, i, a) => v > a[prev] ? i : prev, 0);\n\n// Examples\nindexOfMax([1, 3, 9, 7, 5]);        // 2\nindexOfMax([1, 3, 7, 7, 5]);        // 2\n```\n\n7. 根据属性找出数组中属性值最大的\n\n``` javascript\nconst maxBy = (arr, key) => arr.reduce((a, b) => a[key] >= b[key] ? a : b, {});\n\n// Example\nconst people = [\n    { name: 'Bar', age: 24 },\n    { name: 'Baz', age: 32 },\n    { name: 'Foo', age: 42 },\n    { name: 'Fuzz', age: 36 },\n];\nmaxBy(people, 'age');   // { name: 'Foo', age: 42 }\n```\n\n8. 数组去重\n\n``` javascript\nconst unique = arr => Array.from(new Set(arr));\n\n// Or\nconst unique = arr => arr.filter((el, i, array) => array.indexOf(el) === i);\n```\n\n9. 以属性值为key将数组转化成对象\n\n``` javascript\nconst groupBy = (arr, key) => arr.reduce((acc, item) => ((acc[item[key]] = [...(acc[item[key]] || []), item]), acc), {});\n\n// Example\ngroupBy([\n    { branch: 'audi', model: 'q8', year: '2019' },\n    { branch: 'audi', model: 'rs7', year: '2020' },\n    { branch: 'ford', model: 'mustang', year: '2019' },\n    { branch: 'ford', model: 'explorer', year: '2020' },\n    { branch: 'bmw', model: 'x7', year: '2020' },\n], 'branch');\n\n/*\n{\n    audi: [\n        { branch: 'audi', model: 'q8', year: '2019' },\n        { branch: 'audi', model: 'rs7', year: '2020' }\n    ],\n    bmw: [\n        { branch: 'bmw', model: 'x7', year: '2020' }\n    ],\n    ford: [\n        { branch: 'ford', model: 'mustang', year: '2019' },\n        { branch: 'ford', model: 'explorer', year: '2020' }\n    ],\n}\n*/\n```\n\n10. 根据属性值给数组排序\n\n``` javascript\nconst sortBy = (arr, k) => arr.concat().sort((a, b) => (a[k] > b[k]) ? 1 : ((a[k] < b[k]) ? -1 : 0));\n\n// Example\nconst people = [\n    { name: 'Foo', age: 42 },\n    { name: 'Bar', age: 24 },\n    { name: 'Fuzz', age: 36 },\n    { name: 'Baz', age: 32 },\n];\nsortBy(people, 'age');\n\n// returns\n//  [\n//      { name: 'Bar', age: 24 },\n//      { name: 'Baz', age: 32 },\n//      { name: 'Fuzz', age: 36 },\n//      { name: 'Foo', age: 42 },\n//  ]\n```\n\n## DOM\n\n1. 判断是否为某个元素的子节点\n\n``` javascript\nconst isDescendant = (child, parent) => parent.contains(child);\n```\n\n2. 判断当前元素是否是Focus状态\n\n``` javascript\nconst isFocus = ele => ele === document.activeElement;\n```\n\n3. 判断页面是否滑到底部\n\n``` javascript\nconst isAtBottom = () => document.documentElement.clientHeight + window.scrollY >= document.documentElement.scrollHeight;\n```\n\n4. 当前浏览器判断\n\n``` javascript\n\n// IE\nconst isIE = !!document.documentMode;\n\n// Chrome\nconst isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\n\n// macOS browser\nconst isMacBrowser = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\n```\n\n5. 获取用户选中的文本\n\n``` javascript\nconst getSelectedText = () => window.getSelection().toString();\n```\n\n6. 隐藏元素\n  \n``` javascript\nconst hide = ele => ele.style.display = 'none';\n\n// Or\nconst hide = ele => ele.style.visibility = 'hidden';\n\n// Or\nconst hide = ele => ele.hidden = true;\n```\n\n7. 将元素插入某个元素之后\n\n``` javascript\nconst insertAfter = (ele, anotherEle) => anotherEle.parentNode.insertBefore(ele, anotherEle.nextSibling);\n\n// Or\nconst insertAfter = (ele, anotherEle) => anotherEle.insertAdjacentElement('afterend', ele);\n```\n\n8. 跳转页面\n\n``` javascript\nconst goTo = url => location.href = url;\n```\n\n9. 重新加载当前页\n\n``` javascript\nconst reload = () => location.reload();\n\n// Or\nconst reload = () => (location.href = location.href);\n```\n\n10. 替换元素\n\n``` javascript\nconst replace = (ele, newEle) => ele.parentNode.replaceChild(newEle, ele);\n```\n\n11. 回到页面顶部\n\n``` javascript\nconst goToTop = () => window.scrollTo(0, 0);\n```"},"nextPost":{"slug":"http","frontmatter":{"title":"面试题集合（网络篇）","date":"July 1, 2021","description":null},"excerpt":"","content":"\n## 1. TCP/IP 四层网络模型\n\n第一层：应用层，主要有负责web浏览器的 **HTTP** 协议， 文件传输的 **FTP** 协议，负责电子邮件的 **SMTP** 协议，负责域名系统的 **DNS** 等。\n第二层：传输层，主要是有可靠传输的 **TCP** 协议，特别高效的 **UDP** 协议。主要负责传输应用层的数据包。\n第三层：网络层，主要是 **IP** 协议。主要负责寻址（找到目标设备的位置）\n第四层：数据链路层，主要是负责转换数字信号和物理二进制信号。\n\n## 2. 用户输入url到页面展示的过程\n   \n- DNS解析\n  \n  域名到真实IP的寻址过程\n- 发起TCP连接\n  \n  三次握手🤝，确定 **client** ，**server** 双端的接受发送能力\n- 发起Http请求\n- 服务器处理请求并返回HTTP报文\n- 浏览器解析渲染页面\n\n## 3. 说一下 Http 缓存策略，有什么区别，分别解决了什么问题\n   \n   浏览器每次发起请求时，先在本地缓存中查找结果以及缓存标识，根据缓存标识来判断是否使用本地缓存。如果缓存有效，则使用本地缓存；否则，则向服务器发起请求并携带缓存标识。根据是否需向服务器发起HTTP请求，将缓存过程划分为两个部分：强制缓存和协商缓存，强缓优先于协商缓存。\n\n  - 强缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。\n  - 协商缓存，让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，将缓存信息中的Etag和Last-Modified通过请求 发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。\n\n  HTTP缓存都是从第二次请求开始的：\n\n  - 第一次请求资源时，服务器返回资源，并在response header中回传资源的缓存策略；\n  - 第二次请求时，浏览器判断这些请求参数，击中强缓存就直接200，否则就把请求参数加到request header头中传给服务器，看是否击中协商缓存，击中则返回304，否则服务器会返回新的资源。这是缓存运作的一个整体流程图：\n  ![chrome-cache](chrome-cache.jpeg)\n\n## 4. 常见的Http状态码\n\n- 200 OK：表示从客户端发送给服务器的请求被正常处理并返回\n- 204 No Content：表示客户端发送给服务端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）\n- 301 Moved Permanently：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL\n- 302 Found：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL\n- 304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码\n- 400 Bad Request：表示请求报文中存在语法错误（一般指参数）\n- 401 Unauthorized：没有经过身份认证，需要通过HTTP认证\n- 403 Forbidden：身份认证过了，但是没有权限\n- 404 Not Found：(客户端问题)请求的资源没有找到，说明客户端错误的请求了不存在的资源\n- 500 Inter Server Error：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时\n- 503 Server Unavailable：服务不可用，一般指维护中或者服务重启中\n\n## 5. 跨域的复杂请求和简单请求的区别\n\n### 简单请求\n\n- HTTP方法是下列之一（HEAD、GET、POST）\n- HTTP头信息不超出以下几种字段\n  \n  **Accept**\n\n  **Accept-Language**\n\n  **Content-Type** （application/x-www-form-urlencoded、multipart/form-data、text/plain）\n\n任何一个 **不满足上述要求** 的请求，即被认为是复杂请求\n\n### 复杂请求\n\n- 一个复杂请求不仅有：包含通信内容的请求，同时也包含预请求。\n\n- 复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种\"预请求\"，此时作为服务端，也需要返回\"预回应\"作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。\n\n## 5. TCP和UDP\n\n- TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。\n- 虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为\n- 对数据准确性要求高，速度可以相对较慢的，可以选用TCP\n- HTTP3.0取两者之长\n"}},"__N_SSG":true}