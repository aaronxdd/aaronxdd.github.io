{"pageProps":{"frontmatter":{"title":"算法题（简单系列）","date":"July 25, 2021","description":null},"post":{"content":"\n## 1. 两数之和\n\n### 题目描述\n\n给定一个整数数组 **nums** 和一个目标值 **target**，请你在该数组中找出和为目标值的那 **两个** 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n### 示例\n\n``` javascript\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n````\n\n### 代码实现\n\n``` javascript\nconst findTotal = (nums, target) => {\n  for(let i = 0; i < nums.length; i++) {\n    if (nums.includes(target-nums[i])) {\n      return [i, nums.indexOf(target-nums[i])];\n    }\n  }\n}\n```\n\n``` javascript\nconst twoSum = (nums, target) => {\n  let preNums = {};\n  for (let i = 0; i < nums.length; i++) {\n    const targetNum = target - nums[i];\n    if (preNums[targetNum]) {\n      return [preNums[targetNum], i];\n    }\n    preNums[nums[i]] = i;\n  }\n}\n```\n\n\n## 2. 整数反转\n\n### 题目描述\n\n![reverse-integer](reverse-integer.jpeg)\n\n\n### 代码实现\n\n``` javascript\nconst reverse = (x) => {\n  let result = 0;\n  while (x !== 0) {\n    result = result * 10 + (x % 10);\n    x = Math.floor(x / 10);\n  }\n\n  if (result < -Math.pow(2, 31) || result > Math.pow(2, 31) - 1) {\n    return 0;\n  }\n  return result;\n};\n```\n\n## 3. 合并两个有序链表\n\n### 题目描述\n\n将两个升序链表合并为一个新的 **升序** 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n### 示例1\n\n![merge-two-sorted-lists](merge-two-sorted-lists.jpeg)\n\n``` javascript\n输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n```\n\n### 示例2\n\n``` javascript\n输入：l1 = [], l2 = []\n输出：[]\n```\n\n### 示例3\n\n``` javascript\n输入：l1 = [], l2 = [0]\n输出：[0]\n```\n\n### 提示\n\n- 两个链表的节点数目范围是 [0, 50]\n- -100 <= Node.val <= 100\n- l1 和 l2 均按 非递减顺序 排列\n\n``` javascript\n// 例如 现有两个链表\nconst ListNode1 = {\n  value: 0,\n  next: {\n    value: 2,\n    next: {\n      value: 4,\n      next: null\n    }\n  }\n}\n\nconst ListNode2 = {\n  value: 1,\n  next: {\n    value: 3,\n    next: {\n      value: 5,\n      next: null\n    }\n  }\n}\n```\n\n### 实现\n\n``` javascript\nconst mergeTwoLists = (l1, l2) => {\n  if (l1 === null) {\n    return l2\n  }\n  if (l2 === null) {\n    return l1\n  }\n  if (l1.value < l2.value) {\n    l1.next = mergeTwoLists(l1.next, l2)\n    return l1\n  }\n  if (l2.value < l1.value) {\n    l2.next = mergeTwoLists(l2.next, l1)\n    return l2\n  }\n}\n```\n\n## 4. 最大子序和\n\n### 题目描述\n\n给定一个整数数组 **nums** ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n### 示例1\n\n``` javascript\n输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n```\n\n### 示例2\n\n``` javascript\n输入：nums = [1]\n输出：1\n```\n\n### 示例3\n\n``` javascript\n输入：nums = [0]\n输出：0\n```\n\n### 示例4\n\n``` javascript\n输入：nums = [-1]\n输出：-1\n```\n\n### 示例5\n\n``` javascript\n输入：nums = [-100000]\n输出：-100000\n```\n\n### 提示\n- 1 <= nums.length <= 3 * 104\n- -105 <= nums[i] <= 105\n\n``` javascript\nconst maxSubArray = (nums) => {\n  let pre = 0;\n  let max = nums[0];\n  nums.forEach(x => {\n    pre = Math.max(pre + x, x);\n    max = Math.max(max, pre);\n  });\n  return max;\n};\n```\n\n## 5. 反转链表\n\n### 题目描述\n\n定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n\n### 示例:\n\n``` javascript\nconst ListNode = {\n  value: 1,\n  next: {\n    value: 2,\n    next: {\n      value: 3,\n      next: {\n        value: 4,\n        next: {\n          value: 5,\n          next: null\n        }\n      }\n    }\n  }\n}\n\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n\n### 限制：\n\n``` javascript\n0 <= 节点个数 <= 5000\n```\n\n``` javascript\nconst reverseList = (head) => {\n  let pre = null;\n  let cur = head;\n  while(cur) {\n    const next = cur.next;\n    cur.next = pre;\n    pre = cur;\n    cur = next;\n  }\n  return pre;\n}\n```\n\n## 6. 二叉树的最大深度\n\n### 题目描述\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n**说明： 叶子节点是指没有子节点的节点。**\n\n### 示例\n\n给定二叉树 **[3,9,20,null,null,15,7]**\n\n![maximum-depth-of-binary-tree](maximum-depth-of-binary-tree.jpeg)\n\n返回它的最大深度 3 。\n\n``` javascript\nconst maxDepth = tree => {\n  if (!tree) {\n    return 0;\n  }\n  const maxLeft = maxDepth(tree.left);\n  const maxRight = maxDepth(tree.right);\n  return Math.max(maxLeft, maxRight) + 1;\n}\n```\n\n## 7. 环形链表\n\n### 题目描述\n\n给定一个链表，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。\n\n如果链表中存在环，则返回 true 。 否则，返回 false 。\n\n### 思路\n\n给遍历过的节点打记号，如果遍历过程中遇到有记号的说明已环🤓\n\n``` javascript\nconst hasCycle = head => {\n  while(head) {\n    if (head.tag) {\n      return true;\n    }\n    head.tag = true;\n    head = head.next;\n  }\n  return false;\n}\n```\n\n\n## 8. 合并二叉树\n\n### 题目描述\n\n给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。\n\n你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。\n\n### 示例\n\n![merge-two-binary-trees](merge-two-binary-trees.jpeg)\n\n**注意：合并必须从两个树的根节点开始。**\n\n``` javascript\nconst mergeTrees = (t1, t2) => {\n  if (!t1 || !t2) {\n    return t1 || t2;\n  }\n  t1.value = t1.value + t2.value;\n  t1.left = mergeTrees(t1.left, t2.left);\n  t1.right = mergeTrees(t1.right, t2.right);\n  return t1;\n}\n```\n\n## 9. 有效的括号\n\n### 题目描述\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n1. 左括号必须用相同类型的右括号闭合。\n2. 左括号必须以正确的顺序闭合。\n\n### 示例 1：\n``` javascript\n输入：s = \"()\"\n输出：true\n```\n\n### 示例 2：\n``` javascript\n输入：s = \"()[]{}\"\n输出：true\n```\n\n### 示例 3：\n``` javascript\n输入：s = \"(]\"\n输出：false\n```\n\n### 示例 4：\n``` javascript\n输入：s = \"([)]\"\n输出：false\n```\n\n### 示例 5：\n``` javascript\n输入：s = \"{[]}\"\n输出：true\n```\n\n### 提示：\n\n![valid-parentheses-alert](valid-parentheses-alert.jpeg)\n\n``` javascript\nconst isValid = (str) => {\n  const { length } = str;\n  if (length % 2 !== 0) return false;\n  let arr = [];\n  for (let item of str) {\n    switch (item) {\n      case \"(\":\n      case \"{\":\n      case \"[\":\n        arr.push(item);\n        break;\n      case \")\":\n        if (arr.pop() !== \"(\") return false;\n        break;\n      case \"}\":\n        if (arr.pop() !== \"{\") return false;\n        break;\n      case \"]\":\n        if (arr.pop() !== \"[\") return false;\n        break;\n    }\n  }\n\n  return arr.length === 0\n};\n```\n\n## 10. 爬楼梯\n\n### 题目描述\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n\n注意：给定 n 是一个正整数。\n\n### 示例 1：\n\n``` javascript\n输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶\n```\n\n### 示例 2：\n\n``` javascript\n输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n```\n\n``` javascript\nconst climbStairs = (n) => {\n  if (n < 1) return 0;\n  const dp = [];\n  dp[1] = 1;\n  dp[2] = 2;\n  for (let i = 0; i < n; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];\n};\n```\n\n## 11. 二叉树的中序遍历\n\n### 题目描述\n\n给定一个二叉树的根节点 root ，返回它的 中序 遍历。\n\n### 示例 1：\n\n![binary-tree-inorder-traversal1](binary-tree-inorder-traversal1.jpeg)\n\n``` javascript\n输入：root = [1,null,2,3]\n输出：[1,3,2]\n```\n\n### 示例 2：\n\n``` javascript\n输入：root = []\n输出：[]\n```\n\n### 示例 3：\n\n``` javascript\n输入：root = [1]\n输出：[1]\n```\n\n### 示例 4：\n\n![binary-tree-inorder-traversal2](binary-tree-inorder-traversal2.jpeg)\n\n``` javascript\n输入：root = [1,null,2]\n输出：[1,2]\n```\n\n### 示例 5：\n\n![binary-tree-inorder-traversal3](binary-tree-inorder-traversal3.jpeg)\n\n``` javascript\n输入：root = [1,null,2]\n输出：[1,2]\n```\n\n### 提示：\n\n![binary-tree-inorder-traversal-alert](binary-tree-inorder-traversal-alert.jpeg)\n\n``` javascript\nconst inorderTraversal = (root) => {\n  const res = [];\n  const inorder = (root) => {\n    if (!root) return;\n    inorder(root.left);\n    res.push(root.val);\n    inorder(root.right);\n  }\n  inorder(root)\n  return res;\n};\n```\n\n## 12. 对称二叉树\n\n### 题目描述\n\n给定一个二叉树，检查它是否是镜像对称的。\n\n![symmetric-tree](symmetric-tree.jpeg)\n\n<!-- ``` javascript\n\n``` -->\n\n## 13. 买卖股票的最佳时机\n\n### 题目描述\n\n给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。\n\n你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。\n\n返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。\n\n### 示例 1：\n\n``` javascript\n输入：[7,1,5,3,6,4]\n输出：5\n解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\n```\n\n### 示例 2：\n\n``` javascript\n输入：prices = [7,6,4,3,1]\n输出：0\n解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n### 提示：\n\n![best-time-to-buy-and-sell-stock-alert](best-time-to-buy-and-sell-stock-alert.jpeg)\n\n\n## 14. 只出现一次的数字\n\n### 题目描述\n\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\n### 说明：\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n### 示例 1:\n\n``` javascript\n输入: [2,2,1]\n输出: 1\n```\n\n### 示例 2:\n\n``` javascript\n输入: [4,1,2,1,2]\n输出: 4\n```\n\n``` javascript\nconst singleNumber = (nums) => {\n  let obj = {};\n  for(const num of nums) {\n    if (!obj[num]) {\n      obj[num] = true;\n    } else {\n      delete obj[num]\n    }\n  }\n  return Number(Object.keys(obj)?.[0])\n};\n```\n\n## 15. 最小栈\n\n### 题目描述\n\n设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。\n\n  - push(x) —— 将元素 x 推入栈中。\n  - pop() —— 删除栈顶的元素。\n  - top() —— 获取栈顶元素。\n  - getMin() —— 检索栈中的最小元素。\n\n### 示例:\n\n``` javascript\n  输入：\n  [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n  [[],[-2],[0],[-3],[],[],[],[]]\n\n  输出：\n  [null,null,null,null,-3,null,0,-2]\n\n  解释：\n  MinStack minStack = new MinStack();\n  minStack.push(-2);\n  minStack.push(0);\n  minStack.push(-3);\n  minStack.getMin();   --> 返回 -3.\n  minStack.pop();\n  minStack.top();      --> 返回 0.\n  minStack.getMin();   --> 返回 -2.\n```\n\n### 提示：\n\n- pop、top 和 getMin 操作总是在 非空栈 上调用。\n\n``` javascript\nvar MinStack = function() {\n    this.x_stack = [];\n    this.min_stack = [Infinity];\n};\n\nMinStack.prototype.push = function(x) {\n    this.x_stack.push(x);\n    this.min_stack.push(Math.min(this.min_stack[this.min_stack.length - 1], x));\n};\n\nMinStack.prototype.pop = function() {\n    this.x_stack.pop();\n    this.min_stack.pop();\n};\n\nMinStack.prototype.top = function() {\n    return this.x_stack[this.x_stack.length - 1];\n};\n\nMinStack.prototype.getMin = function() {\n    return this.min_stack[this.min_stack.length - 1];\n};\n```\n\n## 16. 相交链表\n\n### 题目描述\n\n给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。\n\n图示两个链表在节点 c1 开始相交：\n\n![intersection-of-two-linked-lists1](intersection-of-two-linked-lists1.jpeg)\n\n题目数据 保证 整个链式结构中不存在环。\n\n注意，函数返回结果后，链表必须 保持其原始结构 。\n\n### 示例 1：\n\n![intersection-of-two-linked-lists2](intersection-of-two-linked-lists2.jpeg)\n\n``` javascript\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Intersected at '8'\n解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n```\n\n### 示例 2：\n\n![intersection-of-two-linked-lists3](intersection-of-two-linked-lists3.jpeg)\n\n``` javascript\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Intersected at '2'\n解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n```\n\n### 示例 3：\n\n![intersection-of-two-linked-lists4](intersection-of-two-linked-lists4.jpeg)\n\n``` javascript\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n```\n\n### 提示：\n\n![intersection-of-two-linked-lists-alert](intersection-of-two-linked-lists-alert.jpeg)\n\n\n\n","excerpt":""},"previousPost":{"slug":"html","frontmatter":{"title":"面试题集合（HTML篇）","date":"July 17, 2021","description":null},"excerpt":"","content":"\n## 1. 对HTML语义化的一些理解\n\n- 标签语义化有助于构架良好的HTML结构，有利于搜索引擎的建立索引、抓取。SEO\n- 有利于构建清晰的机构，有利于团队的开发、维护。\n\n## 2. 讲讲HTML5加了哪些东西\n\n- 语义化标签（header，footer等）\n- audio，video\n- Canvas\n- 本地存储，各种storage\n- Web Worker多线程\n\n## 3. 那些你不知道的meta标签\n\n- name 属性\n  \n  用于描述页面信息（内容，关键词，作者等）\n  - author\n  - description\n  - keywords\n  - viewport\n\n- http-equiv\n  \n  用于描述HTTP头部\n\n  - content-type\n  - content-security-policy（内容策略）"},"nextPost":null},"__N_SSG":true}