{"pageProps":{"frontmatter":{"title":"面试题集合（真题篇）","date":"July 16, 2021","description":null},"post":{"content":"\n## 1. 性能优化 ：项⽬⾥做过哪些性能优化，怎么检测性能，有没有实际测过优化的数据有多少提升\n  ![性能优化](performance.jpeg)\n\n### 性能优化\n\n- 避免过多的回流与重绘\n  \n  实质上是避免过多的 **render tree** 操作，避免使用table布局；DOM结构避免嵌套过深\n\n- JavaScript、Css、Html压缩\n- splitChunks 拆包\n- 网页中可视化部分（图片，视频等）采用骨架\n- 函数的频繁调用考虑使用防抖节流\n- 多利用缓存（多跟服务器端有关）\n- 大的基础库使用CDN\n- 用上懒加载和预加载\n- 使用Service Worker\n  \n### 检测性能\n\n- 很直观的看network页面的load时间\n- lighthouse进行检测\n- 用webpack-bundle-analyzer查看打包后资源情况\n  \n## 2. http2.0有哪些特性？https是怎么加密的，https强缓存在项目中怎么用的\n\n### http2.0的特性\n- 二进制分帧\n\n  HTTP 1.x 的解析是基于文本，HTTP 2之后将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，提高传输效率\n\n- 多路复用\n  \n  一次链接成功后，只要链接还没断开，那么 client 端就可以在一个链接中**并发**地发起多个请求，每个请求及该请求的响应不需要等待其他的请求，某个请求任务耗时严重，不会影响到其它连接的正常执行\n\n- 头部压缩\n  \n  由于 HTTP 是无状态的，每一个请求都需要头部信息标识这次请求相关信息，所以会造成传输很多重复的信息，当请求数量增大的时候，消耗的资源就会慢慢积累上去。所以 HTTP 2 可以维护一个头部信息字典，差量进行更新头信息，减少头部信息传输占用的资源\n\n### HTTP 与 HTTPS\n\n- HTTP 是明文传输，HTTPS 通过 SSL\\TLS 进行了加密\n- HTTP 的端口号是 80，HTTPS 是 443\n- HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费\n- HTTPS 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。\n\n### 浏览器缓存策略\n\n## 3. web安全（xss/csrf）\n\n### xss（Cross-Site Scripting）\n\n**定义**\n\n跨站脚本攻击，简称脚本注入\n\n**原理**\n\n恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\n**防范**\n\n- HttpOnly 防止劫取 Cookie，浏览器将禁止页面的Javascript 访问带有 HttpOnly 属性的Cookie。\n- 输入检查，对 **<**  、 **>** 进行转译，使得恶意的脚本内容无法执行（React DOM 会在渲染的时候把内容（字符串）进行转义）\n\n\n### csrf\n\n**定义**\n\n跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式\n\n**原理**\n\n利用同域下cookie可以共享，在A页面中嵌入B页面的请求，如果用户登录过B页面，即在A中的B请求可以获取B服务器信任。\n\n**防范**\n\n- Token验证\n\n## 4. 前端能在Http缓存上做哪些优化\n\n- 对于经常不改动的静态资源可以在 nginx 上增加相关的缓存配置，尽可能的命中强缓存\n- 正确使用好前端资源打包的 hash\n- Service Worke 也可以针对缓存做一些优化","excerpt":""},"previousPost":{"slug":"medium","frontmatter":{"title":"算法题（中等系列）","date":"July 14, 2021","description":null},"excerpt":"","content":"\n## 1. 打乱数组\n\n### 题目描述\n\n给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。\n\n实现 **Solution** class:\n- **Solution(int[] nums)** 使用整数数组 **nums** 初始化对象\n- **int[] reset()** 重设数组到它的初始状态并返回\n- **int[] shuffle()** 返回数组随机打乱后的结果\n\n### 示例\n\n``` javascript\n  输入\n  [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n  [[[1, 2, 3]], [], [], []]\n  输出\n  [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n  解释\n  Solution solution = new Solution([1, 2, 3]);\n  solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]\n  solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]\n  solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]\n```\n\n### 提示：\n\n![shuffle-an-array](shuffle-an-array.jpeg)\n\n### todo\n\n## 2. 无重复字符的最长子串\n\n### 题目描述\n\n给定一个字符串 **s** ，请你找出其中不含有重复字符的 最长子串 的长度。\n\n### 示例 1:\n\n``` javascript\n  输入: s = \"abcabcbb\"\n  输出: 3 \n  解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n### 示例 2:\n\n``` javascript\n  输入: s = \"bbbbb\"\n  输出: 1\n  解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n\n### 示例 3:\n\n``` javascript\n  输入: s = \"pwwkew\"\n  输出: 3\n  解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n       请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n\n### 示例 4:\n\n``` javascript\n  输入: s = \"\"\n  输出: 0\n```\n\n### 提示：\n\n![longest-substring-without-repeating-characters](longest-substring-without-repeating-characters.jpeg)\n\n\n\n"},"nextPost":{"slug":"css","frontmatter":{"title":"面试题集合（CSS篇）","date":"July 16, 2021","description":null},"excerpt":"","content":"\n## 1. css 伪类与伪元素区别\n   \n### 伪类(pseudo-classes)\n\n其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。⽐如:hover :active :visited :link :visited :first-child :focus :lang等；由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。\n  \n### 伪元素(Pseudo-elements)\n\nDOM树没有定义的虚拟元素\n\n核⼼就是需要创建通常不存在于⽂档中的元素，⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\n    \n### 伪类与伪元素的区别\n    \n表示⽅法\n\nCSS2 中伪类、伪元素都是以单冒号:表示,CSS2.1 后规定伪类⽤单冒号表示,伪元素⽤双冒号::表示，浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first�line, :first-letter 等)的单冒号写法。CSS2 之后所有新增的伪元素(如::selection)，应该采⽤双冒号的写法。CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头定义不同\n\n伪类即假的类，可以添加类来达到效果\n\n伪元素即假元素，需要通过添加元素才能达到效果\n    \n总结:\n\n伪类和伪元素都是⽤来表示⽂档树以外的\"元素\"。伪类和伪元素分别⽤单冒号:和双冒号::来表示。伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类。\n\n### 相同之处：\n\n伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\n  \n### 不同之处：\n    \n伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。\n\n## 2. position\n\n- static： 默认值。没有定位，元素出现在正常的流中（top, right, bottom, left 和 z-index 属性无效）\n- relative： 该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）\n- absolute： 元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的 **非 static** 定位祖先元素的偏移，来确定元素位置。\n- fixed： 元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。\n\n## 3. 水平垂直居中\n\n- 定宽居中\n  \n  - absolute+负maigin\n  ``` css\n  .father {\n      width: 400px;\n      height: 400px;\n      border: 1px solid blue;\n      position: relative;\n  }\n  \n  .son {\n      width: 100px;\n      height: 100px;\n      background-color: orange;\n      /* 1、定宽高定位：absolute + 负边距margin */\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      margin-top: -50px;\n      margin-left: -50px;\n  }\n  ```\n\n  - absolute+maigin:auto\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      position: relative;\n  }\n  \n  .son {\n      width: 100px;\n      height: 100px;\n      background: green;\n      /*2、定宽高定位：absolute + margin:auto */\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      margin: auto;\n  }\n  ```\n\n- 不定宽居中\n\n  - absolute+transform\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      position: relative;\n  }\n  \n  .son {\n      background: green;\n      /* 1、不定宽高居中：（依赖translate 2d的兼容性）absolute+transform */\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n  }\n  ```\n\n  - lineheight（行内元素）\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      /* 2、不定宽高居中  */\n      text-align: center;\n      line-height: 300px;\n      font-size: 0px;\n  }\n  \n  .son {\n      /* 2、不定宽高居中lineheight */\n      display: inline-block;\n      vertical-align: middle;\n      line-height: inherit;\n      text-align: left;\n      font-size: 16px;\n  }\n  ```\n\n  - flex布局\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      /* 4、不定宽高居中flex */\n      display: flex;\n      justify-content: center;\n      align-items: center;\n  }\n  ```\n\n  - grid布局\n\n  ``` css\n  .father {\n      border: 1px solid red;\n      width: 300px;\n      height: 300px;\n      /* 5、grid */\n      display: grid;\n  }\n  \n  .son {\n      /* 5、不定宽高居中grid(兼容性不如flex 不推荐使用) */\n      justify-self: center;\n      align-self: center;\n  }\n  ```\n## 4. link和@import的区别？\n\n- link 属于 XHTML 标签，⽽ @import 是 CSS 提供的。\n- ⻚⾯被加载时，link 会同时被加载，⽽ @import 引⽤的 CSS 会等到⻚⾯被加载完再加载。\n- link ⽅式的样式权重⾼于 @import 的权重。\n  \n## 5. em\\px\\rem区别\n\n- em：在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width\n- rem：根元素的字体大小（html的font-size)\n- px：绝对单位，⻚⾯按精确像素展示\n\n\n\n"}},"__N_SSG":true}