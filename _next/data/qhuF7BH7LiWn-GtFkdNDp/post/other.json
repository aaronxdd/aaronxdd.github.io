{"pageProps":{"frontmatter":{"title":"面试题集合（其他）","date":"July 11, 2021","description":null},"post":{"content":"\n## 1. 前端之SSO（单点登录）\n\n### 知识点\n- session存储用户信息于服务器\n- 通过session ID（cookie）来实现认证\n- 由于cookie不支持跨域，跨域时的解决方案不同于同域\n\n### 链接\n- [单点登录（SSO）看这一篇就够了](https://www.jianshu.com/p/75edcc05acfd)\n- [前端需要了解的 SSO 与 CAS 知识](https://juejin.cn/post/6844903509272297480)\n  \n## 2. git revert和reset\n\n- git reset操作会将版本回退至指定的commit，指定commit后的操作都将被撤销\n- git revert则撤销指定commit的修改，同时生成一个新的commit\n\n## 3. git merge和rebase\n\n![git merge](git-merge.jpeg)\n![git rebase](git-rebase.jpeg)\n\n- 都是合并操作\n- 当需要保留详细的合并信息的时候建议使用git merge，特别是需要将分支合并进入master分支时；\n- 当发现自己修改某个功能时，频繁进行了git commit提交时，发现其实过多的提交信息没有必要时，可以尝试git rebase\n- rebase操作会去除之前的commit记录，而merge不会\n\n### cherrypick的了解\n\n## 4. git 如何取消add操作\n\n可以reset，reset后面可以跟commit ID，也可以跟Head指针回退add内容\n\n## 5. git的工作流\n\ndev、release、master分支\n\n## 6. keepAlive组件的原理\n\n\n","excerpt":""},"previousPost":{"slug":"browser","frontmatter":{"title":"面试题集合（浏览器篇）","date":"July 6, 2021","description":null},"excerpt":"","content":"\n## 1. 浏览器存储\n\n### Cookie\n\n- 大小限制4k，超出会裁剪\n\n- HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息）\n  \n- cookie 存储在客户端\n  \n  cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。\n\n- cookie 是不可跨域的\n  \n### LocalStorage\n\n- 保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据\n- 大小为5M左右\n- 仅在客户端使用，不和服务端进行通信\n\n### sessionStorage\n\n- 会话级别的浏览器存储（窗口关闭会清空）\n- 大小为5M左右\n- 仅在客户端使用，不和服务端进行通信\n  \n基于上面的特点，sessionStorage 可以有效对表单信息进行维护，比如刷新时，表单信息不丢失。\n\n### sessionStorage 、localStorage 和 cookie 之间的区别\n\n- 共同点：都是保存在浏览器端，且都遵循同源策略。\n- 不同点：在于生命周期与作用域的不同"},"nextPost":{"slug":"medium","frontmatter":{"title":"算法题（中等系列）","date":"July 14, 2021","description":null},"excerpt":"","content":"\n## 1. 打乱数组\n\n### 题目描述\n\n给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。\n\n实现 **Solution** class:\n- **Solution(int[] nums)** 使用整数数组 **nums** 初始化对象\n- **int[] reset()** 重设数组到它的初始状态并返回\n- **int[] shuffle()** 返回数组随机打乱后的结果\n\n### 示例\n\n``` javascript\n  输入\n  [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n  [[[1, 2, 3]], [], [], []]\n  输出\n  [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\n  解释\n  Solution solution = new Solution([1, 2, 3]);\n  solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]\n  solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]\n  solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]\n```\n\n### 提示：\n\n![shuffle-an-array](shuffle-an-array.jpeg)\n\n### todo\n\n## 2. 无重复字符的最长子串\n\n### 题目描述\n\n给定一个字符串 **s** ，请你找出其中不含有重复字符的 最长子串 的长度。\n\n### 示例 1:\n\n``` javascript\n  输入: s = \"abcabcbb\"\n  输出: 3 \n  解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n### 示例 2:\n\n``` javascript\n  输入: s = \"bbbbb\"\n  输出: 1\n  解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n\n### 示例 3:\n\n``` javascript\n  输入: s = \"pwwkew\"\n  输出: 3\n  解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n       请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n\n### 示例 4:\n\n``` javascript\n  输入: s = \"\"\n  输出: 0\n```\n\n### 提示：\n\n![longest-substring-without-repeating-characters](longest-substring-without-repeating-characters.jpeg)\n\n### 暴力算法\n``` javascript\nconst lengthOfLongestSubstring = (str) => {\n  const arr = [];\n  for (let i = 0; i < str.length; i++) {\n    let item = str[i];\n    for (let j = i + 1; j < str.length; j++) {\n      if (item.includes(str[j])) {\n        break;\n      }\n      item += str[j];\n    }\n    arr.push(item.length);\n  }\n  return Math.max(...arr);\n};\n```\n\n\n## 3. 两数相加\n\n### 题目描述\n\n给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。\n\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n你可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n### 示例 1：\n\n![add-two-numbers](add-two-numbers.jpeg)\n\n``` javascript\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n```\n\n### 示例 2：\n\n``` javascript\n输入：l1 = [0], l2 = [0]\n输出：[0]\n```\n\n### 示例 3：\n\n``` javascript\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n```\n\n``` javascript\nconst addTwoNumbers = (l1, l2) => {\n  let addOne = 0;\n  let sum = new ListNode(\"0\");\n  let head = sum;\n  while (addOne || l1 || l2) {\n    let val1 = l1 ? l1.val : 0;\n    let val2 = l2 ? l2.val : 0;\n    let r1 = val1 + val2 + addOne;\n    addOne = r1 >= 10 ? 1 : 0;\n    sum.next = new ListNode(r1 % 10);\n    sum = sum.next;\n    if (l1) l1 = l1.next;\n    if (l2) l2 = l2.next;\n  }\n  return head.next;\n};\n```\n\n## 4. 最长回文子串\n\n### 题目描述\n\n给你一个字符串 s，找到 s 中最长的回文子串。\n\n![longest-palindromic-substring](longest-palindromic-substring.jpeg)\n\n``` javascript\nconst longestPalindrome = function(s) {\n  let n = s.length;\n  let res = '';\n  let dp = Array.from(new Array(n),() => new Array(n).fill(0));\n  for(let i = n-1;i >= 0;i--){\n      for(let j = i;j < n;j++){\n          dp[i][j] = s[i] == s[j] && (j - i < 2 || dp[i+1][j-1]);\n          if(dp[i][j] && j - i +1 > res.length){\n              res = s.substring(i,j+1);\n          }\n      }\n  }\n  return res;\n};\n```\n\n## 5. 盛最多水的容器\n\n### 题目描述\n\n给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n**说明：你不能倾斜容器。**\n\n### 示例 1:\n\n![container-with-most-water](container-with-most-water.jpeg)\n\n``` javascript\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49 \n解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n```\n\n### 示例 2:\n\n``` javascript\n输入：height = [1,1]\n输出：1\n```\n\n### 示例 3:\n\n``` javascript\n输入：height = [4,3,2,1,4]\n输出：16\n```\n\n### 示例 4:\n\n``` javascript\n输入：height = [1,2,1]\n输出：2\n```\n\n### 提示：\n![container-with-most-water](container-with-most-water-alert.jpeg)\n\n``` javascript\nconst maxArea = (arr) => {\n  let max = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  while (j > i) {\n    const area = Math.min(arr[i], arr[j]) * (j - i);\n    if (area > max) max = area;\n    if (arr[i] < arr[j]) {\n      i ++;\n    } else {\n      j --;\n    }\n  }\n  return max;\n}\n```\n\n## 6. 三数之和\n\n### 题目描述\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n### 示例 1:\n\n``` javascript\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n```\n\n### 示例 2:\n\n``` javascript\n输入：nums = []\n输出：[]\n```\n\n### 示例 3:\n\n``` javascript\n输入：nums = [0]\n输出：[]\n```\n\n### 提示：\n\n![3sum-alert](3sum-alert.jpeg)\n\n\n\n\n\n\n\n"}},"__N_SSG":true}