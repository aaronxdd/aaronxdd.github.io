{"pageProps":{"frontmatter":{"title":"面试题集合（浏览器篇）","date":"July 6, 2021","description":null},"post":{"content":"\n## 1. 浏览器存储\n\n### Cookie\n\n- 大小限制4k，超出会裁剪\n\n- HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息）\n  \n- cookie 存储在客户端\n  \n  cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。\n\n- cookie 是不可跨域的\n  \n### LocalStorage\n\n- 保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据\n- 大小为5M左右\n- 仅在客户端使用，不和服务端进行通信\n\n### sessionStorage\n\n- 会话级别的浏览器存储（窗口关闭会清空）\n- 大小为5M左右\n- 仅在客户端使用，不和服务端进行通信\n  \n基于上面的特点，sessionStorage 可以有效对表单信息进行维护，比如刷新时，表单信息不丢失。\n\n### sessionStorage 、localStorage 和 cookie 之间的区别\n\n- 共同点：都是保存在浏览器端，且都遵循同源策略。\n- 不同点：在于生命周期与作用域的不同","excerpt":""},"previousPost":{"slug":"write","frontmatter":{"title":"面试题集合（手撕代码篇）","date":"July 5, 2021","description":null},"excerpt":"","content":"\n  \n## 1. 手写 bind、call、apply\n\n``` javascript\n// call\nFunction.prototype.myCall = (content) => {\n  content = content || window;\n  content.fn = this;\n  const args = [...arguments].slice(1);\n  const result = content.fn(args);\n  delete content.fn;\n  return result;\n}\n\n// apply\nFunction.prototype.myApply = (content) => {\n  content = content || window;\n  content.fn = this;\n  let result\n  if (arguments[1] && Array.isArray(arguments[1])) {\n    if (arguments[1].length === 1) {\n      result = content.fn(...arguments[1])\n    } else {\n      result = content.fn()\n    }\n  }\n  delete content.fn\n  return result\n}\n\n// bind\nFunction.prototype.myBind = (content) => {\n  content = content || window;\n  content.fn = this;\n  const args = [...arguments].slice(1);\n  return () => {\n    content.fn(args)\n  }\n}\n```\n\n## 2. 手写防抖节流\n   \n   防抖\n   ``` javascript\n    const debounce = (fn, delay) => {\n      let timeout = null;\n      return () => {\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = setTimeout(() => {\n          fn.call(this, arguments)\n        }, delay)\n      }\n    }\n   ```\n   节流\n   ``` javascript\n    const throttle = (fn, delay) => {\n      let canRun = true;\n      if (!canRun) {\n        return\n      }\n      canRun = false;\n      setTimeout(() => {\n        fn.call(this. arguments);\n        canRun = true;\n      }, delay);\n    }\n   ```\n\n## 3. 手写数组flat\n\n``` javascript\nconst flat = arr => {\n  arr.reduce((pre, value) => {\n    return pre.concat(Array.isArray(value) ? flat(value) : value)\n  }, []);\n}\n```\n\n## 4. 写一个 mySetInterVal(fn, a, b),每次间隔 a,a+b,a+2b 的时间，然后写一个 myClear，停止上面的 mySetInterVal\n\n``` javascript\nfunction mySetInterVal(fn, a, b) {\n  this.a = a;\n  this.b = b;\n  this.time = 0;\n  this.handle = -1;\n  this.start = () => {\n    this.handle = setTimeout(() => {\n      fn();\n      this.time++;\n      this.start();\n    }, this.a + this.time * this.b);\n  }\n\n  this.stop = () => {\n    clearTimeout(this.handle);\n    this.time = 0;\n  }\n}\n\nvar a = new mySetInterVal(() => {console.log('123')},1000, 2000 );\na.start();\na.stop();\n```\n\n## 5. 斐波那契数列\n   \n``` javascript\nconst Fibonacci = (n) => {\n  if (n < 0) throw new Error('输入的数字不能小于0');\n  if (n < 2) return n;\n  return Fibonacci(n - 1) + Fibonacci(n - 2)\n}\n```\n   \n## 7. 实现 add(1)(2)(3)\n   \n``` javascript\nconst add = (a) => (b) => (c) => a + b + c;\n```\n\n## 8. 数据类型判断\n\ntypeof 可以正确识别：Undefined、Boolean、Number、String、Symbol、Function 等类型的数据，但是对于其他的都会认为是 object，比如 Null、Date 等，所以通过 typeof 来判断数据类型会不准确。但是可以使用 Object.prototype.toString 实现。\n\n``` javascript\nconst getType = (obj) => {\n  return Object.prototype.toString.call(obj).slice(8, -1);\n}\n```\n\n## 9. 数组扁平化\n    \n数组扁平化就是将 [1, [2, [3]]] 这种多层的数组拍平成一层 [1, 2, 3]。使用 Array.prototype.flat 可以直接将多层数组拍平成一层：\n\n``` javascript\n[1, [2, [3]]].flat(2)  // [1, 2, 3]\n```\n\n关键：递归\n\n``` javascript\nconst flatten = arr => {\n  let newArr = [];\n  for(let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      newArr.concat(flatten(arr[i]))\n      return\n    }\n    newArr.push(arr[i])\n  }\n  return neaArr;\n}\n```\n\n## 10. 深浅拷贝\n\n浅拷贝：只考虑对象类型\n\nES5版\n``` javascript\nfunction shallowCopy(obj) {\n  if (typeof obj !== 'object') return\n\n  let newObj = obj instanceof Array ? [] : {};\n\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      newObj[i] = obj[i];\n    }\n  }\n\n  return newObj;\n}\n```\n\nES6版\n``` javascript\nconst shallowCopy = obj => Array.isArray(obj) ? [...obj] : {...obj}\n```\n\n深拷贝\n\n``` javascript\nconst deepClone = obj => {\n  if (typeof obj !== 'object') return;\n  let newObj = obj instanceof Array ? [] : {};\n  \n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (typeof obj[key] === 'object') {\n        newObj[key] = deepClone(obj[key]);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  return newObj;\n}\n```\n\n## 11. 解析 URL 参数为对象\n  \n``` javascript\nconst urlSearch = href => {\n  let obj = {};\n  const queryIndex = href.indexOf('?');\n  const urlOptions = href.slice(queryIndex + 1, href.length);\n  const options = urlOptions.split('&');\n  options.map(option => {\n    const equalIndex = option.indexOf('=');\n    obj[option.slice(0, equalIndex)] = option.slice(equalIndex + 1, option.length);\n  });\n  return obj;\n}\n```\n\n## 12. 实现柯里化（Currying）\n\n``` javascript\nfunction curry(fn) {\n    let judge = (...args) => {\n        if (args.length == fn.length) return fn(...args)\n        return (...arg) => judge(...args, ...arg)\n    }\n    return judge\n}\n```\n\n## 13. 手写AJAX\n\n``` js\nconst myAjax = (url) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) return\n      if (xhr.status === 200) {\n        resolve(xhr.responseText)\n      } else {\n        reject(xhr.responseText)\n      }\n    }\n    xhr.send();\n  })\n}\n```\n\n## 14. 手写Promise\n\n``` javascript\nconst PADDING = \"PADDING\";\nconst FULFILLED = \"FULFILLED\";\nconst REJECTED = \"REJECTED\";\n\nclass MyPromise {\n  constructor(executor) {\n    this.status = PADDING;\n    this.value = undefined;\n    this.error = undefined;\n\n    let resolve = (value) => {\n      if (this.status === PADDING) {\n        this.value = value;\n        this.status = FULFILLED;\n      }\n    }\n\n    let reject = (error) => {\n      if (this.status === PADDING) {\n        this.error = error;\n        this.status = REJECTED;\n      }\n    }\n\n    try {\n      executor(resolve, reject)\n    } catch (e) {\n      reject(e);\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.error)\n    }\n  }\n}\n```\n    \n## 15. 实现 Promise.all\n  \n``` js\nconst promiseAll = (promises) => {\n  if (Array.isArray(promises)) {\n    throw new Error('the arguments must be an array !!!')\n  }\n  const promisesLength = promises.length;\n  let current = 0, result = [];\n  new Promise((resolve, reject) => {\n    promises.forEach((promise, i) => {\n      Promise.resolve(promise).then(value => {\n        current ++;\n        result[i] = value;\n        if (current === promisesLength) {\n          resolve(result)\n        }\n      }, error => reject(error))\n    })\n  })\n}\n```\n\n## 16. 手写模版字符串\n\n``` javascript\nconst render = (str, data) => {\n  const reg = /\\{\\{(\\w+)\\}\\}/;\n  if (reg.test(str)) {\n    const key = reg.exec(str)[1];\n    str = str.replace(reg, data[key]);\n    return render(str, data);\n  }\n  return str;\n} \n```"},"nextPost":{"slug":"other","frontmatter":{"title":"面试题集合（其他）","date":"July 11, 2021","description":null},"excerpt":"","content":"\n## 1. 前端之SSO（单点登录）\n\n### 知识点\n- session存储用户信息于服务器\n- 通过session ID（cookie）来实现认证\n- 由于cookie不支持跨域，跨域时的解决方案不同于同域\n\n### 链接\n- [单点登录（SSO）看这一篇就够了](https://www.jianshu.com/p/75edcc05acfd)\n- [前端需要了解的 SSO 与 CAS 知识](https://juejin.cn/post/6844903509272297480)\n  \n## 2. git revert和reset\n\n- git reset操作会将版本回退至指定的commit，指定commit后的操作都将被撤销\n- git revert则撤销指定commit的修改，同时生成一个新的commit\n\n## 3. git merge和rebase\n\n![git merge](git-merge.jpeg)\n![git rebase](git-rebase.jpeg)\n\n- 都是合并操作\n- 当需要保留详细的合并信息的时候建议使用git merge，特别是需要将分支合并进入master分支时；\n- 当发现自己修改某个功能时，频繁进行了git commit提交时，发现其实过多的提交信息没有必要时，可以尝试git rebase\n- rebase操作会去除之前的commit记录，而merge不会\n\n### cherrypick的了解\n\n## 4. git 如何取消add操作\n\n可以reset，reset后面可以跟commit ID，也可以跟Head指针回退add内容\n\n## 5. git的工作流\n\ndev、release、master分支\n\n## 6. keepAlive组件的原理\n\n\n"}},"__N_SSG":true}